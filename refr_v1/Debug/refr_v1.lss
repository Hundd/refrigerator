
refr_v1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000129e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004c  00800060  0000129e  00001332  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  008000ac  008000ac  0000137e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000137e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000013dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  00001418  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f80  00000000  00000000  000014b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003f5  00000000  00000000  00002430  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000423  00000000  00000000  00002825  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000274  00000000  00000000  00002c48  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000065a  00000000  00000000  00002ebc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008d4  00000000  00000000  00003516  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00003dea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	13 c0       	rjmp	.+38     	; 0x28 <__ctors_end>
       2:	37 c0       	rjmp	.+110    	; 0x72 <__bad_interrupt>
       4:	36 c0       	rjmp	.+108    	; 0x72 <__bad_interrupt>
       6:	35 c0       	rjmp	.+106    	; 0x72 <__bad_interrupt>
       8:	34 c0       	rjmp	.+104    	; 0x72 <__bad_interrupt>
       a:	33 c0       	rjmp	.+102    	; 0x72 <__bad_interrupt>
       c:	32 c0       	rjmp	.+100    	; 0x72 <__bad_interrupt>
       e:	31 c0       	rjmp	.+98     	; 0x72 <__bad_interrupt>
      10:	30 c0       	rjmp	.+96     	; 0x72 <__bad_interrupt>
      12:	2f c0       	rjmp	.+94     	; 0x72 <__bad_interrupt>
      14:	2e c0       	rjmp	.+92     	; 0x72 <__bad_interrupt>
      16:	2d c0       	rjmp	.+90     	; 0x72 <__bad_interrupt>
      18:	2c c0       	rjmp	.+88     	; 0x72 <__bad_interrupt>
      1a:	2b c0       	rjmp	.+86     	; 0x72 <__bad_interrupt>
      1c:	2b c0       	rjmp	.+86     	; 0x74 <__vector_14>
      1e:	29 c0       	rjmp	.+82     	; 0x72 <__bad_interrupt>
      20:	28 c0       	rjmp	.+80     	; 0x72 <__bad_interrupt>
      22:	27 c0       	rjmp	.+78     	; 0x72 <__bad_interrupt>
      24:	26 c0       	rjmp	.+76     	; 0x72 <__bad_interrupt>

00000026 <__ctors_start>:
      26:	ea 03       	fmulsu	r22, r18

00000028 <__ctors_end>:
      28:	11 24       	eor	r1, r1
      2a:	1f be       	out	0x3f, r1	; 63
      2c:	cf e5       	ldi	r28, 0x5F	; 95
      2e:	d4 e0       	ldi	r29, 0x04	; 4
      30:	de bf       	out	0x3e, r29	; 62
      32:	cd bf       	out	0x3d, r28	; 61

00000034 <__do_copy_data>:
      34:	10 e0       	ldi	r17, 0x00	; 0
      36:	a0 e6       	ldi	r26, 0x60	; 96
      38:	b0 e0       	ldi	r27, 0x00	; 0
      3a:	ee e9       	ldi	r30, 0x9E	; 158
      3c:	f2 e1       	ldi	r31, 0x12	; 18
      3e:	02 c0       	rjmp	.+4      	; 0x44 <__SREG__+0x5>
      40:	05 90       	lpm	r0, Z+
      42:	0d 92       	st	X+, r0
      44:	ac 3a       	cpi	r26, 0xAC	; 172
      46:	b1 07       	cpc	r27, r17
      48:	d9 f7       	brne	.-10     	; 0x40 <__SREG__+0x1>

0000004a <__do_clear_bss>:
      4a:	20 e0       	ldi	r18, 0x00	; 0
      4c:	ac ea       	ldi	r26, 0xAC	; 172
      4e:	b0 e0       	ldi	r27, 0x00	; 0
      50:	01 c0       	rjmp	.+2      	; 0x54 <.do_clear_bss_start>

00000052 <.do_clear_bss_loop>:
      52:	1d 92       	st	X+, r1

00000054 <.do_clear_bss_start>:
      54:	a7 3b       	cpi	r26, 0xB7	; 183
      56:	b2 07       	cpc	r27, r18
      58:	e1 f7       	brne	.-8      	; 0x52 <.do_clear_bss_loop>

0000005a <__do_global_ctors>:
      5a:	10 e0       	ldi	r17, 0x00	; 0
      5c:	c4 e1       	ldi	r28, 0x14	; 20
      5e:	d0 e0       	ldi	r29, 0x00	; 0
      60:	03 c0       	rjmp	.+6      	; 0x68 <__do_global_ctors+0xe>
      62:	21 97       	sbiw	r28, 0x01	; 1
      64:	fe 01       	movw	r30, r28
      66:	1b d6       	rcall	.+3126   	; 0xc9e <__tablejump2__>
      68:	c3 31       	cpi	r28, 0x13	; 19
      6a:	d1 07       	cpc	r29, r17
      6c:	d1 f7       	brne	.-12     	; 0x62 <__do_global_ctors+0x8>
      6e:	eb d2       	rcall	.+1494   	; 0x646 <main>
      70:	14 c9       	rjmp	.-3544   	; 0xfffff29a <__eeprom_end+0xff7ef29a>

00000072 <__bad_interrupt>:
      72:	c6 cf       	rjmp	.-116    	; 0x0 <__vectors>

00000074 <__vector_14>:
};
volatile bool AdcClass::DataReady;
volatile uint16_t AdcClass::Data;

ISR(ADC_vect)
	{	
      74:	1f 92       	push	r1
      76:	0f 92       	push	r0
      78:	0f b6       	in	r0, 0x3f	; 63
      7a:	0f 92       	push	r0
      7c:	11 24       	eor	r1, r1
      7e:	8f 93       	push	r24
      80:	9f 93       	push	r25
		AdcClass::Data = ADC;
      82:	84 b1       	in	r24, 0x04	; 4
      84:	95 b1       	in	r25, 0x05	; 5
      86:	90 93 b5 00 	sts	0x00B5, r25
      8a:	80 93 b4 00 	sts	0x00B4, r24
		AdcClass::DataReady = true;
      8e:	81 e0       	ldi	r24, 0x01	; 1
      90:	80 93 b6 00 	sts	0x00B6, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      94:	83 e0       	ldi	r24, 0x03	; 3
      96:	8a 95       	dec	r24
      98:	f1 f7       	brne	.-4      	; 0x96 <__vector_14+0x22>
      9a:	00 00       	nop
		_delay_us(10);
		//ADCSRA |= (1<<ADSC);
      9c:	9f 91       	pop	r25
      9e:	8f 91       	pop	r24
      a0:	0f 90       	pop	r0
      a2:	0f be       	out	0x3f, r0	; 63
      a4:	0f 90       	pop	r0
      a6:	1f 90       	pop	r1
      a8:	18 95       	reti

000000aa <_Z10usart_putcc>:
#define MIN_COMPRESSOR_WORK_TIME 5		//5
#define COMPRESSOR_HOURS_BEFORE_DEFROST 8//8

void usart_putc(char c)
{
	UDR = c;
      aa:	8c b9       	out	0x0c, r24	; 12
	while(!(UCSRA &(1 << UDRE )));
      ac:	5d 9b       	sbis	0x0b, 5	; 11
      ae:	fe cf       	rjmp	.-4      	; 0xac <_Z10usart_putcc+0x2>
}
      b0:	08 95       	ret

000000b2 <_Z10usartPrintPc>:
void usartPrint(char str[]) {
      b2:	cf 93       	push	r28
      b4:	df 93       	push	r29
      b6:	ec 01       	movw	r28, r24
	int i = 0;
	char c  = str[i++];
      b8:	88 81       	ld	r24, Y
	while(c) {
      ba:	88 23       	and	r24, r24
      bc:	29 f0       	breq	.+10     	; 0xc8 <_Z10usartPrintPc+0x16>
      be:	21 96       	adiw	r28, 0x01	; 1
		usart_putc(c);
      c0:	f4 df       	rcall	.-24     	; 0xaa <_Z10usart_putcc>
		c  = str[i++];
      c2:	89 91       	ld	r24, Y+
	while(!(UCSRA &(1 << UDRE )));
}
void usartPrint(char str[]) {
	int i = 0;
	char c  = str[i++];
	while(c) {
      c4:	81 11       	cpse	r24, r1
      c6:	fc cf       	rjmp	.-8      	; 0xc0 <_Z10usartPrintPc+0xe>
		usart_putc(c);
		c  = str[i++];
	}
}
      c8:	df 91       	pop	r29
      ca:	cf 91       	pop	r28
      cc:	08 95       	ret

000000ce <_Z16usartPrintNumberl>:

void usartPrintNumber(long num) {
      ce:	0f 93       	push	r16
      d0:	1f 93       	push	r17
      d2:	cf 93       	push	r28
      d4:	df 93       	push	r29
      d6:	cd b7       	in	r28, 0x3d	; 61
      d8:	de b7       	in	r29, 0x3e	; 62
      da:	2a 97       	sbiw	r28, 0x0a	; 10
      dc:	0f b6       	in	r0, 0x3f	; 63
      de:	f8 94       	cli
      e0:	de bf       	out	0x3e, r29	; 62
      e2:	0f be       	out	0x3f, r0	; 63
      e4:	cd bf       	out	0x3d, r28	; 61
	int i = 0;
	char c;
	char str[10];
	sprintf(str, "%ld \r\n", num);
      e6:	9f 93       	push	r25
      e8:	8f 93       	push	r24
      ea:	7f 93       	push	r23
      ec:	6f 93       	push	r22
      ee:	80 e6       	ldi	r24, 0x60	; 96
      f0:	90 e0       	ldi	r25, 0x00	; 0
      f2:	9f 93       	push	r25
      f4:	8f 93       	push	r24
      f6:	ce 01       	movw	r24, r28
      f8:	01 96       	adiw	r24, 0x01	; 1
      fa:	9f 93       	push	r25
      fc:	8f 93       	push	r24
      fe:	d5 d5       	rcall	.+2986   	; 0xcaa <sprintf>
	c  = str[i++];
     100:	89 81       	ldd	r24, Y+1	; 0x01
	while(c) {
     102:	0f b6       	in	r0, 0x3f	; 63
     104:	f8 94       	cli
     106:	de bf       	out	0x3e, r29	; 62
     108:	0f be       	out	0x3f, r0	; 63
     10a:	cd bf       	out	0x3d, r28	; 61
     10c:	88 23       	and	r24, r24
     10e:	49 f0       	breq	.+18     	; 0x122 <_Z16usartPrintNumberl+0x54>
     110:	8e 01       	movw	r16, r28
     112:	0e 5f       	subi	r16, 0xFE	; 254
     114:	1f 4f       	sbci	r17, 0xFF	; 255
		usart_putc(c);
     116:	c9 df       	rcall	.-110    	; 0xaa <_Z10usart_putcc>
		c  = str[i++];
     118:	f8 01       	movw	r30, r16
     11a:	81 91       	ld	r24, Z+
     11c:	8f 01       	movw	r16, r30
	int i = 0;
	char c;
	char str[10];
	sprintf(str, "%ld \r\n", num);
	c  = str[i++];
	while(c) {
     11e:	81 11       	cpse	r24, r1
     120:	fa cf       	rjmp	.-12     	; 0x116 <_Z16usartPrintNumberl+0x48>
		usart_putc(c);
		c  = str[i++];
	}
	
}
     122:	2a 96       	adiw	r28, 0x0a	; 10
     124:	0f b6       	in	r0, 0x3f	; 63
     126:	f8 94       	cli
     128:	de bf       	out	0x3e, r29	; 62
     12a:	0f be       	out	0x3f, r0	; 63
     12c:	cd bf       	out	0x3d, r28	; 61
     12e:	df 91       	pop	r29
     130:	cf 91       	pop	r28
     132:	1f 91       	pop	r17
     134:	0f 91       	pop	r16
     136:	08 95       	ret

00000138 <_Z15usartPrintFloatf>:

void usartPrintFloat(float num) {
     138:	0f 93       	push	r16
     13a:	1f 93       	push	r17
     13c:	cf 93       	push	r28
     13e:	df 93       	push	r29
     140:	cd b7       	in	r28, 0x3d	; 61
     142:	de b7       	in	r29, 0x3e	; 62
     144:	68 97       	sbiw	r28, 0x18	; 24
     146:	0f b6       	in	r0, 0x3f	; 63
     148:	f8 94       	cli
     14a:	de bf       	out	0x3e, r29	; 62
     14c:	0f be       	out	0x3f, r0	; 63
     14e:	cd bf       	out	0x3d, r28	; 61
	int i = 0;
	char c;
	char str[20];
	float integer;
	float mantisa = modff(num,&integer);
     150:	ae 01       	movw	r20, r28
     152:	4b 5e       	subi	r20, 0xEB	; 235
     154:	5f 4f       	sbci	r21, 0xFF	; 255
     156:	0d d5       	rcall	.+2586   	; 0xb72 <modf>
	sprintf(str, "%d,%d \r\n", (int)integer,(int)(mantisa*100));
     158:	20 e0       	ldi	r18, 0x00	; 0
     15a:	30 e0       	ldi	r19, 0x00	; 0
     15c:	48 ec       	ldi	r20, 0xC8	; 200
     15e:	52 e4       	ldi	r21, 0x42	; 66
     160:	3b d5       	rcall	.+2678   	; 0xbd8 <__mulsf3>
     162:	20 d4       	rcall	.+2112   	; 0x9a4 <__fixsfsi>
     164:	7f 93       	push	r23
     166:	6f 93       	push	r22
     168:	6d 89       	ldd	r22, Y+21	; 0x15
     16a:	7e 89       	ldd	r23, Y+22	; 0x16
     16c:	8f 89       	ldd	r24, Y+23	; 0x17
     16e:	98 8d       	ldd	r25, Y+24	; 0x18
     170:	19 d4       	rcall	.+2098   	; 0x9a4 <__fixsfsi>
     172:	7f 93       	push	r23
     174:	6f 93       	push	r22
     176:	87 e6       	ldi	r24, 0x67	; 103
     178:	90 e0       	ldi	r25, 0x00	; 0
     17a:	9f 93       	push	r25
     17c:	8f 93       	push	r24
     17e:	ce 01       	movw	r24, r28
     180:	01 96       	adiw	r24, 0x01	; 1
     182:	9f 93       	push	r25
     184:	8f 93       	push	r24
     186:	91 d5       	rcall	.+2850   	; 0xcaa <sprintf>
	c  = str[i++];
     188:	89 81       	ldd	r24, Y+1	; 0x01
	while(c) {
     18a:	0f b6       	in	r0, 0x3f	; 63
     18c:	f8 94       	cli
     18e:	de bf       	out	0x3e, r29	; 62
     190:	0f be       	out	0x3f, r0	; 63
     192:	cd bf       	out	0x3d, r28	; 61
     194:	88 23       	and	r24, r24
     196:	49 f0       	breq	.+18     	; 0x1aa <_Z15usartPrintFloatf+0x72>
     198:	8e 01       	movw	r16, r28
     19a:	0e 5f       	subi	r16, 0xFE	; 254
     19c:	1f 4f       	sbci	r17, 0xFF	; 255
		usart_putc(c);
     19e:	85 df       	rcall	.-246    	; 0xaa <_Z10usart_putcc>
		c  = str[i++];
     1a0:	f8 01       	movw	r30, r16
     1a2:	81 91       	ld	r24, Z+
     1a4:	8f 01       	movw	r16, r30
	char str[20];
	float integer;
	float mantisa = modff(num,&integer);
	sprintf(str, "%d,%d \r\n", (int)integer,(int)(mantisa*100));
	c  = str[i++];
	while(c) {
     1a6:	81 11       	cpse	r24, r1
     1a8:	fa cf       	rjmp	.-12     	; 0x19e <_Z15usartPrintFloatf+0x66>
		usart_putc(c);
		c  = str[i++];
	}
	
}
     1aa:	68 96       	adiw	r28, 0x18	; 24
     1ac:	0f b6       	in	r0, 0x3f	; 63
     1ae:	f8 94       	cli
     1b0:	de bf       	out	0x3e, r29	; 62
     1b2:	0f be       	out	0x3f, r0	; 63
     1b4:	cd bf       	out	0x3d, r28	; 61
     1b6:	df 91       	pop	r29
     1b8:	cf 91       	pop	r28
     1ba:	1f 91       	pop	r17
     1bc:	0f 91       	pop	r16
     1be:	08 95       	ret

000001c0 <_Z12checkSensorsPlS_S_>:

		_delay_ms(1000);
    }
}

void checkSensors(long* a, long* b, long* c ) {
     1c0:	4f 92       	push	r4
     1c2:	5f 92       	push	r5
     1c4:	6f 92       	push	r6
     1c6:	7f 92       	push	r7
     1c8:	8f 92       	push	r8
     1ca:	9f 92       	push	r9
     1cc:	af 92       	push	r10
     1ce:	bf 92       	push	r11
     1d0:	cf 92       	push	r12
     1d2:	df 92       	push	r13
     1d4:	ef 92       	push	r14
     1d6:	ff 92       	push	r15
     1d8:	0f 93       	push	r16
     1da:	1f 93       	push	r17
     1dc:	cf 93       	push	r28
     1de:	df 93       	push	r29
     1e0:	7c 01       	movw	r14, r24
     1e2:	8b 01       	movw	r16, r22
     1e4:	ea 01       	movw	r28, r20
		while(!DataReady);
		Voltage = CalculateVoltage(Data);
		DataReady = false;
	}
	void MesureResistor(uint8_t NumberOfPin)
	{	ADMUX &=0xf;
     1e6:	87 b1       	in	r24, 0x07	; 7
     1e8:	8f 70       	andi	r24, 0x0F	; 15
     1ea:	87 b9       	out	0x07, r24	; 7
			ADCSRA |= (1<<ADSC);
	}
	// NumberOfPin example PC1 
	void SelectMixer(uint8_t NumberOfPin)	
	{
		ADMUX &=0xF0;
     1ec:	87 b1       	in	r24, 0x07	; 7
     1ee:	80 7f       	andi	r24, 0xF0	; 240
     1f0:	87 b9       	out	0x07, r24	; 7
		ADMUX |= NumberOfPin;
     1f2:	87 b1       	in	r24, 0x07	; 7
     1f4:	87 b9       	out	0x07, r24	; 7
		Voltage = INFINITY;
	}
	void StartMesurement(uint8_t NumberOfPin)
	{	
		SelectMixer(NumberOfPin);
		ADCSRA |= (1<<ADSC);
     1f6:	36 9a       	sbi	0x06, 6	; 6
		DataReady = false;
	}
	void MesureResistor(uint8_t NumberOfPin)
	{	ADMUX &=0xf;
		StartMesurement(NumberOfPin);
		while(!DataReady);
     1f8:	90 91 b6 00 	lds	r25, 0x00B6
     1fc:	99 23       	and	r25, r25
     1fe:	e1 f3       	breq	.-8      	; 0x1f8 <_Z12checkSensorsPlS_S_+0x38>
		Resistor = CalculateResistor(Data);
     200:	60 91 b4 00 	lds	r22, 0x00B4
     204:	70 91 b5 00 	lds	r23, 0x00B5
﻿
class AdcClass
{
	double CalculateResistor(uint16_t Adc_num)
	{
		if(Adc_num == 1023) return 0;
     208:	6f 3f       	cpi	r22, 0xFF	; 255
     20a:	83 e0       	ldi	r24, 0x03	; 3
     20c:	78 07       	cpc	r23, r24
     20e:	c9 f0       	breq	.+50     	; 0x242 <_Z12checkSensorsPlS_S_+0x82>
		return (double)Adc_num*10000./(1023. - Adc_num);
     210:	80 e0       	ldi	r24, 0x00	; 0
     212:	90 e0       	ldi	r25, 0x00	; 0
     214:	f8 d3       	rcall	.+2032   	; 0xa06 <__floatunsisf>
     216:	4b 01       	movw	r8, r22
     218:	5c 01       	movw	r10, r24
     21a:	20 e0       	ldi	r18, 0x00	; 0
     21c:	30 e4       	ldi	r19, 0x40	; 64
     21e:	4c e1       	ldi	r20, 0x1C	; 28
     220:	56 e4       	ldi	r21, 0x46	; 70
     222:	da d4       	rcall	.+2484   	; 0xbd8 <__mulsf3>
     224:	2b 01       	movw	r4, r22
     226:	3c 01       	movw	r6, r24
     228:	a5 01       	movw	r20, r10
     22a:	94 01       	movw	r18, r8
     22c:	60 e0       	ldi	r22, 0x00	; 0
     22e:	70 ec       	ldi	r23, 0xC0	; 192
     230:	8f e7       	ldi	r24, 0x7F	; 127
     232:	94 e4       	ldi	r25, 0x44	; 68
     234:	e6 d2       	rcall	.+1484   	; 0x802 <__subsf3>
     236:	9b 01       	movw	r18, r22
     238:	ac 01       	movw	r20, r24
     23a:	c3 01       	movw	r24, r6
     23c:	b2 01       	movw	r22, r4
     23e:	4a d3       	rcall	.+1684   	; 0x8d4 <__divsf3>
     240:	03 c0       	rjmp	.+6      	; 0x248 <_Z12checkSensorsPlS_S_+0x88>
﻿
class AdcClass
{
	double CalculateResistor(uint16_t Adc_num)
	{
		if(Adc_num == 1023) return 0;
     242:	60 e0       	ldi	r22, 0x00	; 0
     244:	70 e0       	ldi	r23, 0x00	; 0
     246:	cb 01       	movw	r24, r22
	}
	void MesureResistor(uint8_t NumberOfPin)
	{	ADMUX &=0xf;
		StartMesurement(NumberOfPin);
		while(!DataReady);
		Resistor = CalculateResistor(Data);
     248:	60 93 ac 00 	sts	0x00AC, r22
     24c:	70 93 ad 00 	sts	0x00AD, r23
     250:	80 93 ae 00 	sts	0x00AE, r24
     254:	90 93 af 00 	sts	0x00AF, r25
		DataReady = false;
     258:	10 92 b6 00 	sts	0x00B6, r1
	adcOb.MesureResistor(PC0);
	*a = (long)adcOb.Resistor;
     25c:	a3 d3       	rcall	.+1862   	; 0x9a4 <__fixsfsi>
     25e:	f7 01       	movw	r30, r14
     260:	60 83       	st	Z, r22
     262:	71 83       	std	Z+1, r23	; 0x01
     264:	82 83       	std	Z+2, r24	; 0x02
     266:	93 83       	std	Z+3, r25	; 0x03
		while(!DataReady);
		Voltage = CalculateVoltage(Data);
		DataReady = false;
	}
	void MesureResistor(uint8_t NumberOfPin)
	{	ADMUX &=0xf;
     268:	87 b1       	in	r24, 0x07	; 7
     26a:	8f 70       	andi	r24, 0x0F	; 15
     26c:	87 b9       	out	0x07, r24	; 7
			ADCSRA |= (1<<ADSC);
	}
	// NumberOfPin example PC1 
	void SelectMixer(uint8_t NumberOfPin)	
	{
		ADMUX &=0xF0;
     26e:	87 b1       	in	r24, 0x07	; 7
     270:	80 7f       	andi	r24, 0xF0	; 240
     272:	87 b9       	out	0x07, r24	; 7
		ADMUX |= NumberOfPin;
     274:	38 9a       	sbi	0x07, 0	; 7
		Voltage = INFINITY;
	}
	void StartMesurement(uint8_t NumberOfPin)
	{	
		SelectMixer(NumberOfPin);
		ADCSRA |= (1<<ADSC);
     276:	36 9a       	sbi	0x06, 6	; 6
		DataReady = false;
	}
	void MesureResistor(uint8_t NumberOfPin)
	{	ADMUX &=0xf;
		StartMesurement(NumberOfPin);
		while(!DataReady);
     278:	80 91 b6 00 	lds	r24, 0x00B6
     27c:	88 23       	and	r24, r24
     27e:	e1 f3       	breq	.-8      	; 0x278 <_Z12checkSensorsPlS_S_+0xb8>
		Resistor = CalculateResistor(Data);
     280:	60 91 b4 00 	lds	r22, 0x00B4
     284:	70 91 b5 00 	lds	r23, 0x00B5
﻿
class AdcClass
{
	double CalculateResistor(uint16_t Adc_num)
	{
		if(Adc_num == 1023) return 0;
     288:	6f 3f       	cpi	r22, 0xFF	; 255
     28a:	f3 e0       	ldi	r31, 0x03	; 3
     28c:	7f 07       	cpc	r23, r31
     28e:	c9 f0       	breq	.+50     	; 0x2c2 <_Z12checkSensorsPlS_S_+0x102>
		return (double)Adc_num*10000./(1023. - Adc_num);
     290:	80 e0       	ldi	r24, 0x00	; 0
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	b8 d3       	rcall	.+1904   	; 0xa06 <__floatunsisf>
     296:	6b 01       	movw	r12, r22
     298:	7c 01       	movw	r14, r24
     29a:	20 e0       	ldi	r18, 0x00	; 0
     29c:	30 e4       	ldi	r19, 0x40	; 64
     29e:	4c e1       	ldi	r20, 0x1C	; 28
     2a0:	56 e4       	ldi	r21, 0x46	; 70
     2a2:	9a d4       	rcall	.+2356   	; 0xbd8 <__mulsf3>
     2a4:	4b 01       	movw	r8, r22
     2a6:	5c 01       	movw	r10, r24
     2a8:	a7 01       	movw	r20, r14
     2aa:	96 01       	movw	r18, r12
     2ac:	60 e0       	ldi	r22, 0x00	; 0
     2ae:	70 ec       	ldi	r23, 0xC0	; 192
     2b0:	8f e7       	ldi	r24, 0x7F	; 127
     2b2:	94 e4       	ldi	r25, 0x44	; 68
     2b4:	a6 d2       	rcall	.+1356   	; 0x802 <__subsf3>
     2b6:	9b 01       	movw	r18, r22
     2b8:	ac 01       	movw	r20, r24
     2ba:	c5 01       	movw	r24, r10
     2bc:	b4 01       	movw	r22, r8
     2be:	0a d3       	rcall	.+1556   	; 0x8d4 <__divsf3>
     2c0:	03 c0       	rjmp	.+6      	; 0x2c8 <_Z12checkSensorsPlS_S_+0x108>
﻿
class AdcClass
{
	double CalculateResistor(uint16_t Adc_num)
	{
		if(Adc_num == 1023) return 0;
     2c2:	60 e0       	ldi	r22, 0x00	; 0
     2c4:	70 e0       	ldi	r23, 0x00	; 0
     2c6:	cb 01       	movw	r24, r22
	}
	void MesureResistor(uint8_t NumberOfPin)
	{	ADMUX &=0xf;
		StartMesurement(NumberOfPin);
		while(!DataReady);
		Resistor = CalculateResistor(Data);
     2c8:	60 93 ac 00 	sts	0x00AC, r22
     2cc:	70 93 ad 00 	sts	0x00AD, r23
     2d0:	80 93 ae 00 	sts	0x00AE, r24
     2d4:	90 93 af 00 	sts	0x00AF, r25
		DataReady = false;
     2d8:	10 92 b6 00 	sts	0x00B6, r1
	adcOb.MesureResistor(PC1);
	*b = (long)adcOb.Resistor;
     2dc:	63 d3       	rcall	.+1734   	; 0x9a4 <__fixsfsi>
     2de:	f8 01       	movw	r30, r16
     2e0:	60 83       	st	Z, r22
     2e2:	71 83       	std	Z+1, r23	; 0x01
     2e4:	82 83       	std	Z+2, r24	; 0x02
     2e6:	93 83       	std	Z+3, r25	; 0x03
		while(!DataReady);
		Voltage = CalculateVoltage(Data);
		DataReady = false;
	}
	void MesureResistor(uint8_t NumberOfPin)
	{	ADMUX &=0xf;
     2e8:	87 b1       	in	r24, 0x07	; 7
     2ea:	8f 70       	andi	r24, 0x0F	; 15
     2ec:	87 b9       	out	0x07, r24	; 7
			ADCSRA |= (1<<ADSC);
	}
	// NumberOfPin example PC1 
	void SelectMixer(uint8_t NumberOfPin)	
	{
		ADMUX &=0xF0;
     2ee:	87 b1       	in	r24, 0x07	; 7
     2f0:	80 7f       	andi	r24, 0xF0	; 240
     2f2:	87 b9       	out	0x07, r24	; 7
		ADMUX |= NumberOfPin;
     2f4:	39 9a       	sbi	0x07, 1	; 7
		Voltage = INFINITY;
	}
	void StartMesurement(uint8_t NumberOfPin)
	{	
		SelectMixer(NumberOfPin);
		ADCSRA |= (1<<ADSC);
     2f6:	36 9a       	sbi	0x06, 6	; 6
		DataReady = false;
	}
	void MesureResistor(uint8_t NumberOfPin)
	{	ADMUX &=0xf;
		StartMesurement(NumberOfPin);
		while(!DataReady);
     2f8:	80 91 b6 00 	lds	r24, 0x00B6
     2fc:	88 23       	and	r24, r24
     2fe:	e1 f3       	breq	.-8      	; 0x2f8 <_Z12checkSensorsPlS_S_+0x138>
		Resistor = CalculateResistor(Data);
     300:	60 91 b4 00 	lds	r22, 0x00B4
     304:	70 91 b5 00 	lds	r23, 0x00B5
﻿
class AdcClass
{
	double CalculateResistor(uint16_t Adc_num)
	{
		if(Adc_num == 1023) return 0;
     308:	6f 3f       	cpi	r22, 0xFF	; 255
     30a:	f3 e0       	ldi	r31, 0x03	; 3
     30c:	7f 07       	cpc	r23, r31
     30e:	c9 f0       	breq	.+50     	; 0x342 <_Z12checkSensorsPlS_S_+0x182>
		return (double)Adc_num*10000./(1023. - Adc_num);
     310:	80 e0       	ldi	r24, 0x00	; 0
     312:	90 e0       	ldi	r25, 0x00	; 0
     314:	78 d3       	rcall	.+1776   	; 0xa06 <__floatunsisf>
     316:	6b 01       	movw	r12, r22
     318:	7c 01       	movw	r14, r24
     31a:	20 e0       	ldi	r18, 0x00	; 0
     31c:	30 e4       	ldi	r19, 0x40	; 64
     31e:	4c e1       	ldi	r20, 0x1C	; 28
     320:	56 e4       	ldi	r21, 0x46	; 70
     322:	5a d4       	rcall	.+2228   	; 0xbd8 <__mulsf3>
     324:	4b 01       	movw	r8, r22
     326:	5c 01       	movw	r10, r24
     328:	a7 01       	movw	r20, r14
     32a:	96 01       	movw	r18, r12
     32c:	60 e0       	ldi	r22, 0x00	; 0
     32e:	70 ec       	ldi	r23, 0xC0	; 192
     330:	8f e7       	ldi	r24, 0x7F	; 127
     332:	94 e4       	ldi	r25, 0x44	; 68
     334:	66 d2       	rcall	.+1228   	; 0x802 <__subsf3>
     336:	9b 01       	movw	r18, r22
     338:	ac 01       	movw	r20, r24
     33a:	c5 01       	movw	r24, r10
     33c:	b4 01       	movw	r22, r8
     33e:	ca d2       	rcall	.+1428   	; 0x8d4 <__divsf3>
     340:	03 c0       	rjmp	.+6      	; 0x348 <_Z12checkSensorsPlS_S_+0x188>
﻿
class AdcClass
{
	double CalculateResistor(uint16_t Adc_num)
	{
		if(Adc_num == 1023) return 0;
     342:	60 e0       	ldi	r22, 0x00	; 0
     344:	70 e0       	ldi	r23, 0x00	; 0
     346:	cb 01       	movw	r24, r22
	}
	void MesureResistor(uint8_t NumberOfPin)
	{	ADMUX &=0xf;
		StartMesurement(NumberOfPin);
		while(!DataReady);
		Resistor = CalculateResistor(Data);
     348:	60 93 ac 00 	sts	0x00AC, r22
     34c:	70 93 ad 00 	sts	0x00AD, r23
     350:	80 93 ae 00 	sts	0x00AE, r24
     354:	90 93 af 00 	sts	0x00AF, r25
		DataReady = false;
     358:	10 92 b6 00 	sts	0x00B6, r1
	adcOb.MesureResistor(PC2);
	*c = (long)adcOb.Resistor;
     35c:	23 d3       	rcall	.+1606   	; 0x9a4 <__fixsfsi>
     35e:	68 83       	st	Y, r22
     360:	79 83       	std	Y+1, r23	; 0x01
     362:	8a 83       	std	Y+2, r24	; 0x02
     364:	9b 83       	std	Y+3, r25	; 0x03
}
     366:	df 91       	pop	r29
     368:	cf 91       	pop	r28
     36a:	1f 91       	pop	r17
     36c:	0f 91       	pop	r16
     36e:	ff 90       	pop	r15
     370:	ef 90       	pop	r14
     372:	df 90       	pop	r13
     374:	cf 90       	pop	r12
     376:	bf 90       	pop	r11
     378:	af 90       	pop	r10
     37a:	9f 90       	pop	r9
     37c:	8f 90       	pop	r8
     37e:	7f 90       	pop	r7
     380:	6f 90       	pop	r6
     382:	5f 90       	pop	r5
     384:	4f 90       	pop	r4
     386:	08 95       	ret

00000388 <_Z18checkCoolingSensorv>:
int8_t checkCoolingSensor(){
     388:	8f 92       	push	r8
     38a:	9f 92       	push	r9
     38c:	af 92       	push	r10
     38e:	bf 92       	push	r11
     390:	cf 92       	push	r12
     392:	df 92       	push	r13
     394:	ef 92       	push	r14
     396:	ff 92       	push	r15
		while(!DataReady);
		Voltage = CalculateVoltage(Data);
		DataReady = false;
	}
	void MesureResistor(uint8_t NumberOfPin)
	{	ADMUX &=0xf;
     398:	87 b1       	in	r24, 0x07	; 7
     39a:	8f 70       	andi	r24, 0x0F	; 15
     39c:	87 b9       	out	0x07, r24	; 7
			ADCSRA |= (1<<ADSC);
	}
	// NumberOfPin example PC1 
	void SelectMixer(uint8_t NumberOfPin)	
	{
		ADMUX &=0xF0;
     39e:	87 b1       	in	r24, 0x07	; 7
     3a0:	80 7f       	andi	r24, 0xF0	; 240
     3a2:	87 b9       	out	0x07, r24	; 7
		ADMUX |= NumberOfPin;
     3a4:	87 b1       	in	r24, 0x07	; 7
     3a6:	87 b9       	out	0x07, r24	; 7
		Voltage = INFINITY;
	}
	void StartMesurement(uint8_t NumberOfPin)
	{	
		SelectMixer(NumberOfPin);
		ADCSRA |= (1<<ADSC);
     3a8:	36 9a       	sbi	0x06, 6	; 6
		DataReady = false;
	}
	void MesureResistor(uint8_t NumberOfPin)
	{	ADMUX &=0xf;
		StartMesurement(NumberOfPin);
		while(!DataReady);
     3aa:	80 91 b6 00 	lds	r24, 0x00B6
     3ae:	88 23       	and	r24, r24
     3b0:	e1 f3       	breq	.-8      	; 0x3aa <_Z18checkCoolingSensorv+0x22>
		Resistor = CalculateResistor(Data);
     3b2:	60 91 b4 00 	lds	r22, 0x00B4
     3b6:	70 91 b5 00 	lds	r23, 0x00B5
﻿
class AdcClass
{
	double CalculateResistor(uint16_t Adc_num)
	{
		if(Adc_num == 1023) return 0;
     3ba:	6f 3f       	cpi	r22, 0xFF	; 255
     3bc:	83 e0       	ldi	r24, 0x03	; 3
     3be:	78 07       	cpc	r23, r24
     3c0:	b9 f1       	breq	.+110    	; 0x430 <_Z18checkCoolingSensorv+0xa8>
		return (double)Adc_num*10000./(1023. - Adc_num);
     3c2:	80 e0       	ldi	r24, 0x00	; 0
     3c4:	90 e0       	ldi	r25, 0x00	; 0
     3c6:	1f d3       	rcall	.+1598   	; 0xa06 <__floatunsisf>
     3c8:	6b 01       	movw	r12, r22
     3ca:	7c 01       	movw	r14, r24
     3cc:	20 e0       	ldi	r18, 0x00	; 0
     3ce:	30 e4       	ldi	r19, 0x40	; 64
     3d0:	4c e1       	ldi	r20, 0x1C	; 28
     3d2:	56 e4       	ldi	r21, 0x46	; 70
     3d4:	01 d4       	rcall	.+2050   	; 0xbd8 <__mulsf3>
     3d6:	4b 01       	movw	r8, r22
     3d8:	5c 01       	movw	r10, r24
     3da:	a7 01       	movw	r20, r14
     3dc:	96 01       	movw	r18, r12
     3de:	60 e0       	ldi	r22, 0x00	; 0
     3e0:	70 ec       	ldi	r23, 0xC0	; 192
     3e2:	8f e7       	ldi	r24, 0x7F	; 127
     3e4:	94 e4       	ldi	r25, 0x44	; 68
     3e6:	0d d2       	rcall	.+1050   	; 0x802 <__subsf3>
     3e8:	9b 01       	movw	r18, r22
     3ea:	ac 01       	movw	r20, r24
     3ec:	c5 01       	movw	r24, r10
     3ee:	b4 01       	movw	r22, r8
     3f0:	71 d2       	rcall	.+1250   	; 0x8d4 <__divsf3>
     3f2:	6b 01       	movw	r12, r22
     3f4:	7c 01       	movw	r14, r24
	}
	void MesureResistor(uint8_t NumberOfPin)
	{	ADMUX &=0xf;
		StartMesurement(NumberOfPin);
		while(!DataReady);
		Resistor = CalculateResistor(Data);
     3f6:	60 93 ac 00 	sts	0x00AC, r22
     3fa:	70 93 ad 00 	sts	0x00AD, r23
     3fe:	80 93 ae 00 	sts	0x00AE, r24
     402:	90 93 af 00 	sts	0x00AF, r25
		DataReady = false;
     406:	10 92 b6 00 	sts	0x00B6, r1
	adcOb.MesureResistor(PC0);

	//Нужно выключить компрессор
	if (adcOb.Resistor > LOW_TEMP) {
     40a:	20 e0       	ldi	r18, 0x00	; 0
     40c:	30 ec       	ldi	r19, 0xC0	; 192
     40e:	4a ed       	ldi	r20, 0xDA	; 218
     410:	56 e4       	ldi	r21, 0x46	; 70
     412:	ab d3       	rcall	.+1878   	; 0xb6a <__gesf2>
     414:	18 16       	cp	r1, r24
     416:	54 f0       	brlt	.+20     	; 0x42c <_Z18checkCoolingSensorv+0xa4>
		return 1;
	}

	//Нужно включить компрессор
	if (adcOb.Resistor < HIGH_TEMP) {
     418:	20 e0       	ldi	r18, 0x00	; 0
     41a:	34 ef       	ldi	r19, 0xF4	; 244
     41c:	45 ec       	ldi	r20, 0xC5	; 197
     41e:	56 e4       	ldi	r21, 0x46	; 70
     420:	c7 01       	movw	r24, r14
     422:	b6 01       	movw	r22, r12
     424:	53 d2       	rcall	.+1190   	; 0x8cc <__cmpsf2>
     426:	88 0f       	add	r24, r24
     428:	88 0b       	sbc	r24, r24
     42a:	10 c0       	rjmp	.+32     	; 0x44c <_Z18checkCoolingSensorv+0xc4>
int8_t checkCoolingSensor(){
	adcOb.MesureResistor(PC0);

	//Нужно выключить компрессор
	if (adcOb.Resistor > LOW_TEMP) {
		return 1;
     42c:	81 e0       	ldi	r24, 0x01	; 1
     42e:	0e c0       	rjmp	.+28     	; 0x44c <_Z18checkCoolingSensorv+0xc4>
	}
	void MesureResistor(uint8_t NumberOfPin)
	{	ADMUX &=0xf;
		StartMesurement(NumberOfPin);
		while(!DataReady);
		Resistor = CalculateResistor(Data);
     430:	10 92 ac 00 	sts	0x00AC, r1
     434:	10 92 ad 00 	sts	0x00AD, r1
     438:	10 92 ae 00 	sts	0x00AE, r1
     43c:	10 92 af 00 	sts	0x00AF, r1
		DataReady = false;
     440:	10 92 b6 00 	sts	0x00B6, r1
﻿
class AdcClass
{
	double CalculateResistor(uint16_t Adc_num)
	{
		if(Adc_num == 1023) return 0;
     444:	c1 2c       	mov	r12, r1
     446:	d1 2c       	mov	r13, r1
     448:	76 01       	movw	r14, r12
     44a:	e6 cf       	rjmp	.-52     	; 0x418 <_Z18checkCoolingSensorv+0x90>
	//Нужно включить компрессор
	if (adcOb.Resistor < HIGH_TEMP) {
		return -1;
	}
	return 0;
}
     44c:	ff 90       	pop	r15
     44e:	ef 90       	pop	r14
     450:	df 90       	pop	r13
     452:	cf 90       	pop	r12
     454:	bf 90       	pop	r11
     456:	af 90       	pop	r10
     458:	9f 90       	pop	r9
     45a:	8f 90       	pop	r8
     45c:	08 95       	ret

0000045e <_Z21checkVaporizingSensorv>:

int8_t checkVaporizingSensor() {
     45e:	8f 92       	push	r8
     460:	9f 92       	push	r9
     462:	af 92       	push	r10
     464:	bf 92       	push	r11
     466:	cf 92       	push	r12
     468:	df 92       	push	r13
     46a:	ef 92       	push	r14
     46c:	ff 92       	push	r15
		while(!DataReady);
		Voltage = CalculateVoltage(Data);
		DataReady = false;
	}
	void MesureResistor(uint8_t NumberOfPin)
	{	ADMUX &=0xf;
     46e:	87 b1       	in	r24, 0x07	; 7
     470:	8f 70       	andi	r24, 0x0F	; 15
     472:	87 b9       	out	0x07, r24	; 7
			ADCSRA |= (1<<ADSC);
	}
	// NumberOfPin example PC1 
	void SelectMixer(uint8_t NumberOfPin)	
	{
		ADMUX &=0xF0;
     474:	87 b1       	in	r24, 0x07	; 7
     476:	80 7f       	andi	r24, 0xF0	; 240
     478:	87 b9       	out	0x07, r24	; 7
		ADMUX |= NumberOfPin;
     47a:	39 9a       	sbi	0x07, 1	; 7
		Voltage = INFINITY;
	}
	void StartMesurement(uint8_t NumberOfPin)
	{	
		SelectMixer(NumberOfPin);
		ADCSRA |= (1<<ADSC);
     47c:	36 9a       	sbi	0x06, 6	; 6
		DataReady = false;
	}
	void MesureResistor(uint8_t NumberOfPin)
	{	ADMUX &=0xf;
		StartMesurement(NumberOfPin);
		while(!DataReady);
     47e:	80 91 b6 00 	lds	r24, 0x00B6
     482:	88 23       	and	r24, r24
     484:	e1 f3       	breq	.-8      	; 0x47e <__stack+0x1f>
		Resistor = CalculateResistor(Data);
     486:	60 91 b4 00 	lds	r22, 0x00B4
     48a:	70 91 b5 00 	lds	r23, 0x00B5
﻿
class AdcClass
{
	double CalculateResistor(uint16_t Adc_num)
	{
		if(Adc_num == 1023) return 0;
     48e:	6f 3f       	cpi	r22, 0xFF	; 255
     490:	83 e0       	ldi	r24, 0x03	; 3
     492:	78 07       	cpc	r23, r24
     494:	c9 f0       	breq	.+50     	; 0x4c8 <__stack+0x69>
		return (double)Adc_num*10000./(1023. - Adc_num);
     496:	80 e0       	ldi	r24, 0x00	; 0
     498:	90 e0       	ldi	r25, 0x00	; 0
     49a:	b5 d2       	rcall	.+1386   	; 0xa06 <__floatunsisf>
     49c:	6b 01       	movw	r12, r22
     49e:	7c 01       	movw	r14, r24
     4a0:	20 e0       	ldi	r18, 0x00	; 0
     4a2:	30 e4       	ldi	r19, 0x40	; 64
     4a4:	4c e1       	ldi	r20, 0x1C	; 28
     4a6:	56 e4       	ldi	r21, 0x46	; 70
     4a8:	97 d3       	rcall	.+1838   	; 0xbd8 <__mulsf3>
     4aa:	4b 01       	movw	r8, r22
     4ac:	5c 01       	movw	r10, r24
     4ae:	a7 01       	movw	r20, r14
     4b0:	96 01       	movw	r18, r12
     4b2:	60 e0       	ldi	r22, 0x00	; 0
     4b4:	70 ec       	ldi	r23, 0xC0	; 192
     4b6:	8f e7       	ldi	r24, 0x7F	; 127
     4b8:	94 e4       	ldi	r25, 0x44	; 68
     4ba:	a3 d1       	rcall	.+838    	; 0x802 <__subsf3>
     4bc:	9b 01       	movw	r18, r22
     4be:	ac 01       	movw	r20, r24
     4c0:	c5 01       	movw	r24, r10
     4c2:	b4 01       	movw	r22, r8
     4c4:	07 d2       	rcall	.+1038   	; 0x8d4 <__divsf3>
     4c6:	03 c0       	rjmp	.+6      	; 0x4ce <__stack+0x6f>
﻿
class AdcClass
{
	double CalculateResistor(uint16_t Adc_num)
	{
		if(Adc_num == 1023) return 0;
     4c8:	60 e0       	ldi	r22, 0x00	; 0
     4ca:	70 e0       	ldi	r23, 0x00	; 0
     4cc:	cb 01       	movw	r24, r22
	}
	void MesureResistor(uint8_t NumberOfPin)
	{	ADMUX &=0xf;
		StartMesurement(NumberOfPin);
		while(!DataReady);
		Resistor = CalculateResistor(Data);
     4ce:	60 93 ac 00 	sts	0x00AC, r22
     4d2:	70 93 ad 00 	sts	0x00AD, r23
     4d6:	80 93 ae 00 	sts	0x00AE, r24
     4da:	90 93 af 00 	sts	0x00AF, r25
		DataReady = false;
     4de:	10 92 b6 00 	sts	0x00B6, r1
	adcOb.MesureResistor(PC2);
	if (adcOb.Resistor < VAPORIZE_TEMP) {
     4e2:	20 e0       	ldi	r18, 0x00	; 0
     4e4:	30 e4       	ldi	r19, 0x40	; 64
     4e6:	4b e9       	ldi	r20, 0x9B	; 155
     4e8:	56 e4       	ldi	r21, 0x46	; 70
     4ea:	f0 d1       	rcall	.+992    	; 0x8cc <__cmpsf2>
			return 1;
	}
	return 0;
}
     4ec:	88 1f       	adc	r24, r24
     4ee:	88 27       	eor	r24, r24
     4f0:	88 1f       	adc	r24, r24
     4f2:	ff 90       	pop	r15
     4f4:	ef 90       	pop	r14
     4f6:	df 90       	pop	r13
     4f8:	cf 90       	pop	r12
     4fa:	bf 90       	pop	r11
     4fc:	af 90       	pop	r10
     4fe:	9f 90       	pop	r9
     500:	8f 90       	pop	r8
     502:	08 95       	ret

00000504 <_Z16turnOnCompressorv>:
	}
	turnOffCompressor();
	return minutes;
}
void turnOnCompressor() {
	DDRD |= 1 << PD2;
     504:	8a 9a       	sbi	0x11, 2	; 17
	PORTD |= 1 << PD2;
     506:	92 9a       	sbi	0x12, 2	; 18
     508:	08 95       	ret

0000050a <_Z17turnOffCompressorv>:
}
void turnOffCompressor() {
	DDRD |= 1 << PD2;
     50a:	8a 9a       	sbi	0x11, 2	; 17
	PORTD &= ~( 1 << PD2 );
     50c:	92 98       	cbi	0x12, 2	; 18
     50e:	08 95       	ret

00000510 <_Z7coolingv>:
}



//Включение и отключение компрессора
uint8_t cooling () {
     510:	4f 92       	push	r4
     512:	5f 92       	push	r5
     514:	6f 92       	push	r6
     516:	7f 92       	push	r7
     518:	8f 92       	push	r8
     51a:	9f 92       	push	r9
     51c:	af 92       	push	r10
     51e:	bf 92       	push	r11
     520:	df 92       	push	r13
     522:	ef 92       	push	r14
     524:	ff 92       	push	r15
     526:	0f 93       	push	r16
     528:	1f 93       	push	r17
     52a:	cf 93       	push	r28
     52c:	df 93       	push	r29
	uint8_t minutes = 0;
	turnOnCompressor();
     52e:	ea df       	rcall	.-44     	; 0x504 <_Z16turnOnCompressorv>



//Включение и отключение компрессора
uint8_t cooling () {
	uint8_t minutes = 0;
     530:	10 e0       	ldi	r17, 0x00	; 0
﻿
class AdcClass
{
	double CalculateResistor(uint16_t Adc_num)
	{
		if(Adc_num == 1023) return 0;
     532:	d1 2c       	mov	r13, r1
     534:	e1 2c       	mov	r14, r1
     536:	f1 2c       	mov	r15, r1
     538:	00 e0       	ldi	r16, 0x00	; 0
	}
	void MesureResistor(uint8_t NumberOfPin)
	{	ADMUX &=0xf;
		StartMesurement(NumberOfPin);
		while(!DataReady);
		Resistor = CalculateResistor(Data);
     53a:	cc ea       	ldi	r28, 0xAC	; 172
     53c:	d0 e0       	ldi	r29, 0x00	; 0
	turnOnCompressor();
	while(checkCoolingSensor() != 1 || minutes < MIN_COMPRESSOR_WORK_TIME) {
     53e:	4a c0       	rjmp	.+148    	; 0x5d4 <_Z7coolingv+0xc4>
		if (minutes < 255) minutes += 1;
     540:	1f 3f       	cpi	r17, 0xFF	; 255
     542:	09 f0       	breq	.+2      	; 0x546 <_Z7coolingv+0x36>
     544:	1f 5f       	subi	r17, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     546:	2f ef       	ldi	r18, 0xFF	; 255
     548:	8a e1       	ldi	r24, 0x1A	; 26
     54a:	97 eb       	ldi	r25, 0xB7	; 183
     54c:	21 50       	subi	r18, 0x01	; 1
     54e:	80 40       	sbci	r24, 0x00	; 0
     550:	90 40       	sbci	r25, 0x00	; 0
     552:	e1 f7       	brne	.-8      	; 0x54c <_Z7coolingv+0x3c>
     554:	00 c0       	rjmp	.+0      	; 0x556 <_Z7coolingv+0x46>
     556:	00 00       	nop
		while(!DataReady);
		Voltage = CalculateVoltage(Data);
		DataReady = false;
	}
	void MesureResistor(uint8_t NumberOfPin)
	{	ADMUX &=0xf;
     558:	87 b1       	in	r24, 0x07	; 7
     55a:	8f 70       	andi	r24, 0x0F	; 15
     55c:	87 b9       	out	0x07, r24	; 7
			ADCSRA |= (1<<ADSC);
	}
	// NumberOfPin example PC1 
	void SelectMixer(uint8_t NumberOfPin)	
	{
		ADMUX &=0xF0;
     55e:	87 b1       	in	r24, 0x07	; 7
     560:	80 7f       	andi	r24, 0xF0	; 240
     562:	87 b9       	out	0x07, r24	; 7
		ADMUX |= NumberOfPin;
     564:	87 b1       	in	r24, 0x07	; 7
     566:	87 b9       	out	0x07, r24	; 7
		Voltage = INFINITY;
	}
	void StartMesurement(uint8_t NumberOfPin)
	{	
		SelectMixer(NumberOfPin);
		ADCSRA |= (1<<ADSC);
     568:	36 9a       	sbi	0x06, 6	; 6
		DataReady = false;
	}
	void MesureResistor(uint8_t NumberOfPin)
	{	ADMUX &=0xf;
		StartMesurement(NumberOfPin);
		while(!DataReady);
     56a:	90 91 b6 00 	lds	r25, 0x00B6
     56e:	99 23       	and	r25, r25
     570:	e1 f3       	breq	.-8      	; 0x56a <_Z7coolingv+0x5a>
		Resistor = CalculateResistor(Data);
     572:	60 91 b4 00 	lds	r22, 0x00B4
     576:	70 91 b5 00 	lds	r23, 0x00B5
﻿
class AdcClass
{
	double CalculateResistor(uint16_t Adc_num)
	{
		if(Adc_num == 1023) return 0;
     57a:	6f 3f       	cpi	r22, 0xFF	; 255
     57c:	23 e0       	ldi	r18, 0x03	; 3
     57e:	72 07       	cpc	r23, r18
     580:	d9 f0       	breq	.+54     	; 0x5b8 <_Z7coolingv+0xa8>
		return (double)Adc_num*10000./(1023. - Adc_num);
     582:	80 e0       	ldi	r24, 0x00	; 0
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	3f d2       	rcall	.+1150   	; 0xa06 <__floatunsisf>
     588:	4b 01       	movw	r8, r22
     58a:	5c 01       	movw	r10, r24
     58c:	20 e0       	ldi	r18, 0x00	; 0
     58e:	30 e4       	ldi	r19, 0x40	; 64
     590:	4c e1       	ldi	r20, 0x1C	; 28
     592:	56 e4       	ldi	r21, 0x46	; 70
     594:	21 d3       	rcall	.+1602   	; 0xbd8 <__mulsf3>
     596:	2b 01       	movw	r4, r22
     598:	3c 01       	movw	r6, r24
     59a:	a5 01       	movw	r20, r10
     59c:	94 01       	movw	r18, r8
     59e:	60 e0       	ldi	r22, 0x00	; 0
     5a0:	70 ec       	ldi	r23, 0xC0	; 192
     5a2:	8f e7       	ldi	r24, 0x7F	; 127
     5a4:	94 e4       	ldi	r25, 0x44	; 68
     5a6:	2d d1       	rcall	.+602    	; 0x802 <__subsf3>
     5a8:	9b 01       	movw	r18, r22
     5aa:	ac 01       	movw	r20, r24
     5ac:	c3 01       	movw	r24, r6
     5ae:	b2 01       	movw	r22, r4
     5b0:	91 d1       	rcall	.+802    	; 0x8d4 <__divsf3>
     5b2:	36 2f       	mov	r19, r22
     5b4:	27 2f       	mov	r18, r23
     5b6:	04 c0       	rjmp	.+8      	; 0x5c0 <_Z7coolingv+0xb0>
﻿
class AdcClass
{
	double CalculateResistor(uint16_t Adc_num)
	{
		if(Adc_num == 1023) return 0;
     5b8:	3d 2d       	mov	r19, r13
     5ba:	2e 2d       	mov	r18, r14
     5bc:	8f 2d       	mov	r24, r15
     5be:	90 2f       	mov	r25, r16
	}
	void MesureResistor(uint8_t NumberOfPin)
	{	ADMUX &=0xf;
		StartMesurement(NumberOfPin);
		while(!DataReady);
		Resistor = CalculateResistor(Data);
     5c0:	43 2f       	mov	r20, r19
     5c2:	52 2f       	mov	r21, r18
     5c4:	68 2f       	mov	r22, r24
     5c6:	79 2f       	mov	r23, r25
     5c8:	48 83       	st	Y, r20
     5ca:	59 83       	std	Y+1, r21	; 0x01
     5cc:	6a 83       	std	Y+2, r22	; 0x02
     5ce:	7b 83       	std	Y+3, r23	; 0x03
		DataReady = false;
     5d0:	10 92 b6 00 	sts	0x00B6, r1

//Включение и отключение компрессора
uint8_t cooling () {
	uint8_t minutes = 0;
	turnOnCompressor();
	while(checkCoolingSensor() != 1 || minutes < MIN_COMPRESSOR_WORK_TIME) {
     5d4:	d9 de       	rcall	.-590    	; 0x388 <_Z18checkCoolingSensorv>
     5d6:	81 30       	cpi	r24, 0x01	; 1
     5d8:	09 f0       	breq	.+2      	; 0x5dc <_Z7coolingv+0xcc>
     5da:	b2 cf       	rjmp	.-156    	; 0x540 <_Z7coolingv+0x30>
     5dc:	15 30       	cpi	r17, 0x05	; 5
     5de:	08 f4       	brcc	.+2      	; 0x5e2 <_Z7coolingv+0xd2>
     5e0:	af cf       	rjmp	.-162    	; 0x540 <_Z7coolingv+0x30>
		if (minutes < 255) minutes += 1;
		_delay_ms(MIN_DELAY_MS);
		adcOb.MesureResistor(PC0);
	}
	turnOffCompressor();
     5e2:	93 df       	rcall	.-218    	; 0x50a <_Z17turnOffCompressorv>
	return minutes;
}
     5e4:	81 2f       	mov	r24, r17
     5e6:	df 91       	pop	r29
     5e8:	cf 91       	pop	r28
     5ea:	1f 91       	pop	r17
     5ec:	0f 91       	pop	r16
     5ee:	ff 90       	pop	r15
     5f0:	ef 90       	pop	r14
     5f2:	df 90       	pop	r13
     5f4:	bf 90       	pop	r11
     5f6:	af 90       	pop	r10
     5f8:	9f 90       	pop	r9
     5fa:	8f 90       	pop	r8
     5fc:	7f 90       	pop	r7
     5fe:	6f 90       	pop	r6
     600:	5f 90       	pop	r5
     602:	4f 90       	pop	r4
     604:	08 95       	ret

00000606 <_Z12turnOnHeaterv>:
	turnOffHeater();
	return 0;
}

void turnOnHeater() {
	DDRD |= 1 << PD3;
     606:	8b 9a       	sbi	0x11, 3	; 17
	PORTD |= 1 << PD3;
     608:	93 9a       	sbi	0x12, 3	; 18
     60a:	08 95       	ret

0000060c <_Z13turnOffHeaterv>:
}
void turnOffHeater() {
	DDRD |= 1 << PD3;
     60c:	8b 9a       	sbi	0x11, 3	; 17
	PORTD &= ~( 1 << PD3 );
     60e:	93 98       	cbi	0x12, 3	; 18
     610:	08 95       	ret

00000612 <_Z7deFrozev>:
void turnOffCompressor() {
	DDRD |= 1 << PD2;
	PORTD &= ~( 1 << PD2 );
}

uint8_t deFroze () {
     612:	cf 93       	push	r28
     614:	df 93       	push	r29
	unsigned long deFrozeTime = 20;//Minutes
	turnOnHeater();
     616:	f7 df       	rcall	.-18     	; 0x606 <_Z12turnOnHeaterv>
     618:	c0 e0       	ldi	r28, 0x00	; 0
     61a:	d0 e0       	ldi	r29, 0x00	; 0
     61c:	2f ef       	ldi	r18, 0xFF	; 255
     61e:	8a e1       	ldi	r24, 0x1A	; 26
     620:	97 eb       	ldi	r25, 0xB7	; 183
     622:	21 50       	subi	r18, 0x01	; 1
     624:	80 40       	sbci	r24, 0x00	; 0
     626:	90 40       	sbci	r25, 0x00	; 0
     628:	e1 f7       	brne	.-8      	; 0x622 <_Z7deFrozev+0x10>
     62a:	00 c0       	rjmp	.+0      	; 0x62c <_Z7deFrozev+0x1a>
     62c:	00 00       	nop
	while (deFrozeTime) {
		deFrozeTime -=1;
		_delay_ms(SECONDS_IN_MINUTE*1000.);
		if(checkVaporizingSensor()) break;
     62e:	17 df       	rcall	.-466    	; 0x45e <_Z21checkVaporizingSensorv>
     630:	81 11       	cpse	r24, r1
     632:	04 c0       	rjmp	.+8      	; 0x63c <_Z7deFrozev+0x2a>
     634:	21 96       	adiw	r28, 0x01	; 1
}

uint8_t deFroze () {
	unsigned long deFrozeTime = 20;//Minutes
	turnOnHeater();
	while (deFrozeTime) {
     636:	c4 31       	cpi	r28, 0x14	; 20
     638:	d1 05       	cpc	r29, r1
     63a:	81 f7       	brne	.-32     	; 0x61c <_Z7deFrozev+0xa>
		deFrozeTime -=1;
		_delay_ms(SECONDS_IN_MINUTE*1000.);
		if(checkVaporizingSensor()) break;
	}
	turnOffHeater();
     63c:	e7 df       	rcall	.-50     	; 0x60c <_Z13turnOffHeaterv>
	return 0;
}
     63e:	80 e0       	ldi	r24, 0x00	; 0
     640:	df 91       	pop	r29
     642:	cf 91       	pop	r28
     644:	08 95       	ret

00000646 <main>:



AdcClass adcOb;
int main(void)
{	
     646:	cf 93       	push	r28
     648:	df 93       	push	r29
     64a:	cd b7       	in	r28, 0x3d	; 61
     64c:	de b7       	in	r29, 0x3e	; 62
     64e:	2c 97       	sbiw	r28, 0x0c	; 12
     650:	0f b6       	in	r0, 0x3f	; 63
     652:	f8 94       	cli
     654:	de bf       	out	0x3e, r29	; 62
     656:	0f be       	out	0x3f, r0	; 63
     658:	cd bf       	out	0x3d, r28	; 61
	long coolingTemperature;
	//Температура в морозильной камере
	long freezerTemperature;
	//Температура испарителя
	long vaporizerTemperature;
	sei();
     65a:	78 94       	sei
	turnOffCompressor();
     65c:	56 df       	rcall	.-340    	; 0x50a <_Z17turnOffCompressorv>
	turnOffHeater();
     65e:	d6 df       	rcall	.-84     	; 0x60c <_Z13turnOffHeaterv>
	UCSRB |=1<<TXEN;
     660:	53 9a       	sbi	0x0a, 3	; 10
	UBRRL=0x33;
     662:	83 e3       	ldi	r24, 0x33	; 51
     664:	89 b9       	out	0x09, r24	; 9
    /* Replace with your application code */
	usartPrint((char*)"Starting a program...\r\n");
     666:	80 e7       	ldi	r24, 0x70	; 112
     668:	90 e0       	ldi	r25, 0x00	; 0
     66a:	23 dd       	rcall	.-1466   	; 0xb2 <_Z10usartPrintPc>
			ADCSRA |= (1<<ADSC);
	}
	// NumberOfPin example PC1 
	void SelectMixer(uint8_t NumberOfPin)	
	{
		ADMUX &=0xF0;
     66c:	87 b1       	in	r24, 0x07	; 7
     66e:	80 7f       	andi	r24, 0xF0	; 240
     670:	87 b9       	out	0x07, r24	; 7
		ADMUX |= NumberOfPin;
     672:	38 9a       	sbi	0x07, 0	; 7
	void Init()
	{
			
			
			SelectMixer(PC1);
			ADCSRA |=(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     674:	86 b1       	in	r24, 0x06	; 6
     676:	87 60       	ori	r24, 0x07	; 7
     678:	86 b9       	out	0x06, r24	; 6
			ADCSRA |=(1<<ADIE);
     67a:	33 9a       	sbi	0x06, 3	; 6
			ADCSRA |=(1<<ADEN);
     67c:	37 9a       	sbi	0x06, 7	; 6
			//ADCSRA |=(1<<ADFR);
			ADCSRA |= (1<<ADSC);
     67e:	36 9a       	sbi	0x06, 6	; 6
		while(!DataReady);
		Voltage = CalculateVoltage(Data);
		DataReady = false;
	}
	void MesureResistor(uint8_t NumberOfPin)
	{	ADMUX &=0xf;
     680:	87 b1       	in	r24, 0x07	; 7
     682:	8f 70       	andi	r24, 0x0F	; 15
     684:	87 b9       	out	0x07, r24	; 7
			ADCSRA |= (1<<ADSC);
	}
	// NumberOfPin example PC1 
	void SelectMixer(uint8_t NumberOfPin)	
	{
		ADMUX &=0xF0;
     686:	87 b1       	in	r24, 0x07	; 7
     688:	80 7f       	andi	r24, 0xF0	; 240
     68a:	87 b9       	out	0x07, r24	; 7
		ADMUX |= NumberOfPin;
     68c:	87 b1       	in	r24, 0x07	; 7
     68e:	87 b9       	out	0x07, r24	; 7
		Voltage = INFINITY;
	}
	void StartMesurement(uint8_t NumberOfPin)
	{	
		SelectMixer(NumberOfPin);
		ADCSRA |= (1<<ADSC);
     690:	36 9a       	sbi	0x06, 6	; 6
		DataReady = false;
	}
	void MesureResistor(uint8_t NumberOfPin)
	{	ADMUX &=0xf;
		StartMesurement(NumberOfPin);
		while(!DataReady);
     692:	80 91 b6 00 	lds	r24, 0x00B6
     696:	88 23       	and	r24, r24
     698:	e1 f3       	breq	.-8      	; 0x692 <main+0x4c>
		Resistor = CalculateResistor(Data);
     69a:	60 91 b4 00 	lds	r22, 0x00B4
     69e:	70 91 b5 00 	lds	r23, 0x00B5
﻿
class AdcClass
{
	double CalculateResistor(uint16_t Adc_num)
	{
		if(Adc_num == 1023) return 0;
     6a2:	6f 3f       	cpi	r22, 0xFF	; 255
     6a4:	23 e0       	ldi	r18, 0x03	; 3
     6a6:	72 07       	cpc	r23, r18
     6a8:	c9 f0       	breq	.+50     	; 0x6dc <main+0x96>
		return (double)Adc_num*10000./(1023. - Adc_num);
     6aa:	80 e0       	ldi	r24, 0x00	; 0
     6ac:	90 e0       	ldi	r25, 0x00	; 0
     6ae:	ab d1       	rcall	.+854    	; 0xa06 <__floatunsisf>
     6b0:	6b 01       	movw	r12, r22
     6b2:	7c 01       	movw	r14, r24
     6b4:	20 e0       	ldi	r18, 0x00	; 0
     6b6:	30 e4       	ldi	r19, 0x40	; 64
     6b8:	4c e1       	ldi	r20, 0x1C	; 28
     6ba:	56 e4       	ldi	r21, 0x46	; 70
     6bc:	8d d2       	rcall	.+1306   	; 0xbd8 <__mulsf3>
     6be:	4b 01       	movw	r8, r22
     6c0:	5c 01       	movw	r10, r24
     6c2:	a7 01       	movw	r20, r14
     6c4:	96 01       	movw	r18, r12
     6c6:	60 e0       	ldi	r22, 0x00	; 0
     6c8:	70 ec       	ldi	r23, 0xC0	; 192
     6ca:	8f e7       	ldi	r24, 0x7F	; 127
     6cc:	94 e4       	ldi	r25, 0x44	; 68
     6ce:	99 d0       	rcall	.+306    	; 0x802 <__subsf3>
     6d0:	9b 01       	movw	r18, r22
     6d2:	ac 01       	movw	r20, r24
     6d4:	c5 01       	movw	r24, r10
     6d6:	b4 01       	movw	r22, r8
     6d8:	fd d0       	rcall	.+506    	; 0x8d4 <__divsf3>
     6da:	03 c0       	rjmp	.+6      	; 0x6e2 <main+0x9c>
﻿
class AdcClass
{
	double CalculateResistor(uint16_t Adc_num)
	{
		if(Adc_num == 1023) return 0;
     6dc:	60 e0       	ldi	r22, 0x00	; 0
     6de:	70 e0       	ldi	r23, 0x00	; 0
     6e0:	cb 01       	movw	r24, r22
	}
	void MesureResistor(uint8_t NumberOfPin)
	{	ADMUX &=0xf;
		StartMesurement(NumberOfPin);
		while(!DataReady);
		Resistor = CalculateResistor(Data);
     6e2:	60 93 ac 00 	sts	0x00AC, r22
     6e6:	70 93 ad 00 	sts	0x00AD, r23
     6ea:	80 93 ae 00 	sts	0x00AE, r24
     6ee:	90 93 af 00 	sts	0x00AF, r25
		DataReady = false;
     6f2:	10 92 b6 00 	sts	0x00B6, r1
	adcOb.Init();
	adcOb.MesureResistor(PC0);
	//usartPrintNumber(ADC);
	
	
	checkSensors(&coolingTemperature,&freezerTemperature,&vaporizerTemperature);
     6f6:	ae 01       	movw	r20, r28
     6f8:	4f 5f       	subi	r20, 0xFF	; 255
     6fa:	5f 4f       	sbci	r21, 0xFF	; 255
     6fc:	be 01       	movw	r22, r28
     6fe:	6b 5f       	subi	r22, 0xFB	; 251
     700:	7f 4f       	sbci	r23, 0xFF	; 255
     702:	ce 01       	movw	r24, r28
     704:	09 96       	adiw	r24, 0x09	; 9
     706:	5c dd       	rcall	.-1352   	; 0x1c0 <_Z12checkSensorsPlS_S_>
	usartPrint((char*)"Cooling:   ");
     708:	88 e8       	ldi	r24, 0x88	; 136
     70a:	90 e0       	ldi	r25, 0x00	; 0
     70c:	d2 dc       	rcall	.-1628   	; 0xb2 <_Z10usartPrintPc>
	usartPrintNumber(coolingTemperature);
     70e:	69 85       	ldd	r22, Y+9	; 0x09
     710:	7a 85       	ldd	r23, Y+10	; 0x0a
     712:	8b 85       	ldd	r24, Y+11	; 0x0b
     714:	9c 85       	ldd	r25, Y+12	; 0x0c
     716:	db dc       	rcall	.-1610   	; 0xce <_Z16usartPrintNumberl>
	usartPrint((char*)"Freezer:   ");
     718:	84 e9       	ldi	r24, 0x94	; 148
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	ca dc       	rcall	.-1644   	; 0xb2 <_Z10usartPrintPc>
	usartPrintNumber(freezerTemperature);
     71e:	6d 81       	ldd	r22, Y+5	; 0x05
     720:	7e 81       	ldd	r23, Y+6	; 0x06
     722:	8f 81       	ldd	r24, Y+7	; 0x07
     724:	98 85       	ldd	r25, Y+8	; 0x08
     726:	d3 dc       	rcall	.-1626   	; 0xce <_Z16usartPrintNumberl>
	usartPrint((char*)"Vaporiser: ");
     728:	80 ea       	ldi	r24, 0xA0	; 160
     72a:	90 e0       	ldi	r25, 0x00	; 0
     72c:	c2 dc       	rcall	.-1660   	; 0xb2 <_Z10usartPrintPc>
	usartPrintNumber(vaporizerTemperature);
     72e:	69 81       	ldd	r22, Y+1	; 0x01
     730:	7a 81       	ldd	r23, Y+2	; 0x02
     732:	8b 81       	ldd	r24, Y+3	; 0x03
     734:	9c 81       	ldd	r25, Y+4	; 0x04
     736:	cb dc       	rcall	.-1642   	; 0xce <_Z16usartPrintNumberl>
	
	float* EEP_COMPRESSOR_TIME = (float*)0;
	float totalCompressorTime = 0;

	if(eeprom_read_byte((uint8_t*)EEP_COMPRESSOR_TIME) == 0xFF) {
     738:	80 e0       	ldi	r24, 0x00	; 0
     73a:	90 e0       	ldi	r25, 0x00	; 0
     73c:	45 d5       	rcall	.+2698   	; 0x11c8 <eeprom_read_byte>
     73e:	8f 3f       	cpi	r24, 0xFF	; 255
     740:	51 f4       	brne	.+20     	; 0x756 <main+0x110>
		eeprom_write_float(EEP_COMPRESSOR_TIME,totalCompressorTime);
     742:	40 e0       	ldi	r20, 0x00	; 0
     744:	50 e0       	ldi	r21, 0x00	; 0
     746:	ba 01       	movw	r22, r20
     748:	80 e0       	ldi	r24, 0x00	; 0
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	4a d5       	rcall	.+2708   	; 0x11e2 <eeprom_write_dword>
	usartPrintNumber(freezerTemperature);
	usartPrint((char*)"Vaporiser: ");
	usartPrintNumber(vaporizerTemperature);
	
	float* EEP_COMPRESSOR_TIME = (float*)0;
	float totalCompressorTime = 0;
     74e:	c1 2c       	mov	r12, r1
     750:	d1 2c       	mov	r13, r1
     752:	76 01       	movw	r14, r12
     754:	05 c0       	rjmp	.+10     	; 0x760 <main+0x11a>

	if(eeprom_read_byte((uint8_t*)EEP_COMPRESSOR_TIME) == 0xFF) {
		eeprom_write_float(EEP_COMPRESSOR_TIME,totalCompressorTime);
	}
	else {
		totalCompressorTime = eeprom_read_float(EEP_COMPRESSOR_TIME);
     756:	80 e0       	ldi	r24, 0x00	; 0
     758:	90 e0       	ldi	r25, 0x00	; 0
     75a:	3e d5       	rcall	.+2684   	; 0x11d8 <eeprom_read_dword>
     75c:	6b 01       	movw	r12, r22
     75e:	7c 01       	movw	r14, r24
	}
    while (1) 
    {
		 usartPrintFloat(totalCompressorTime);
     760:	c7 01       	movw	r24, r14
     762:	b6 01       	movw	r22, r12
     764:	e9 dc       	rcall	.-1582   	; 0x138 <_Z15usartPrintFloatf>
		 
		 if (checkCoolingSensor() == -1) {
     766:	10 de       	rcall	.-992    	; 0x388 <_Z18checkCoolingSensorv>
     768:	8f 3f       	cpi	r24, 0xFF	; 255
     76a:	b9 f4       	brne	.+46     	; 0x79a <main+0x154>
			totalCompressorTime += cooling()/60.;
     76c:	d1 de       	rcall	.-606    	; 0x510 <_Z7coolingv>
     76e:	68 2f       	mov	r22, r24
     770:	70 e0       	ldi	r23, 0x00	; 0
     772:	80 e0       	ldi	r24, 0x00	; 0
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	49 d1       	rcall	.+658    	; 0xa0a <__floatsisf>
     778:	20 e0       	ldi	r18, 0x00	; 0
     77a:	30 e0       	ldi	r19, 0x00	; 0
     77c:	40 e7       	ldi	r20, 0x70	; 112
     77e:	52 e4       	ldi	r21, 0x42	; 66
     780:	a9 d0       	rcall	.+338    	; 0x8d4 <__divsf3>
     782:	9b 01       	movw	r18, r22
     784:	ac 01       	movw	r20, r24
     786:	c7 01       	movw	r24, r14
     788:	b6 01       	movw	r22, r12
     78a:	3c d0       	rcall	.+120    	; 0x804 <__addsf3>
     78c:	6b 01       	movw	r12, r22
     78e:	7c 01       	movw	r14, r24
			eeprom_write_float(EEP_COMPRESSOR_TIME,totalCompressorTime);
     790:	ab 01       	movw	r20, r22
     792:	bc 01       	movw	r22, r24
     794:	80 e0       	ldi	r24, 0x00	; 0
     796:	90 e0       	ldi	r25, 0x00	; 0
     798:	24 d5       	rcall	.+2632   	; 0x11e2 <eeprom_write_dword>
		 }

		 if (totalCompressorTime > COMPRESSOR_HOURS_BEFORE_DEFROST) {
     79a:	20 e0       	ldi	r18, 0x00	; 0
     79c:	30 e0       	ldi	r19, 0x00	; 0
     79e:	40 e0       	ldi	r20, 0x00	; 0
     7a0:	51 e4       	ldi	r21, 0x41	; 65
     7a2:	c7 01       	movw	r24, r14
     7a4:	b6 01       	movw	r22, r12
     7a6:	e1 d1       	rcall	.+962    	; 0xb6a <__gesf2>
     7a8:	18 16       	cp	r1, r24
     7aa:	54 f4       	brge	.+20     	; 0x7c0 <main+0x17a>
			 deFroze();
     7ac:	32 df       	rcall	.-412    	; 0x612 <_Z7deFrozev>
			 //Если холодильник разморозился, то счетчик часов компрессора нужно обнулить
			 totalCompressorTime = 0;
			 eeprom_write_float(EEP_COMPRESSOR_TIME,totalCompressorTime);
     7ae:	40 e0       	ldi	r20, 0x00	; 0
     7b0:	50 e0       	ldi	r21, 0x00	; 0
     7b2:	ba 01       	movw	r22, r20
     7b4:	80 e0       	ldi	r24, 0x00	; 0
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	14 d5       	rcall	.+2600   	; 0x11e2 <eeprom_write_dword>
		 }

		 if (totalCompressorTime > COMPRESSOR_HOURS_BEFORE_DEFROST) {
			 deFroze();
			 //Если холодильник разморозился, то счетчик часов компрессора нужно обнулить
			 totalCompressorTime = 0;
     7ba:	c1 2c       	mov	r12, r1
     7bc:	d1 2c       	mov	r13, r1
     7be:	76 01       	movw	r14, r12
     7c0:	8f e3       	ldi	r24, 0x3F	; 63
     7c2:	9d e0       	ldi	r25, 0x0D	; 13
     7c4:	23 e0       	ldi	r18, 0x03	; 3
     7c6:	81 50       	subi	r24, 0x01	; 1
     7c8:	90 40       	sbci	r25, 0x00	; 0
     7ca:	20 40       	sbci	r18, 0x00	; 0
     7cc:	e1 f7       	brne	.-8      	; 0x7c6 <main+0x180>
     7ce:	00 c0       	rjmp	.+0      	; 0x7d0 <main+0x18a>
     7d0:	00 00       	nop
     7d2:	c6 cf       	rjmp	.-116    	; 0x760 <main+0x11a>

000007d4 <_GLOBAL__sub_I__ZN8AdcClass9DataReadyE>:
		ADMUX &=0xF0;
		ADMUX |= NumberOfPin;
	}
	AdcClass()
	{
		Data = 1024;
     7d4:	80 e0       	ldi	r24, 0x00	; 0
     7d6:	94 e0       	ldi	r25, 0x04	; 4
     7d8:	90 93 b5 00 	sts	0x00B5, r25
     7dc:	80 93 b4 00 	sts	0x00B4, r24
		DataReady = false;
     7e0:	10 92 b6 00 	sts	0x00B6, r1
		Resistor = INFINITY;
     7e4:	ec ea       	ldi	r30, 0xAC	; 172
     7e6:	f0 e0       	ldi	r31, 0x00	; 0
     7e8:	80 e0       	ldi	r24, 0x00	; 0
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	a0 e8       	ldi	r26, 0x80	; 128
     7ee:	bf e7       	ldi	r27, 0x7F	; 127
     7f0:	80 83       	st	Z, r24
     7f2:	91 83       	std	Z+1, r25	; 0x01
     7f4:	a2 83       	std	Z+2, r26	; 0x02
     7f6:	b3 83       	std	Z+3, r27	; 0x03
		Voltage = INFINITY;
     7f8:	84 83       	std	Z+4, r24	; 0x04
     7fa:	95 83       	std	Z+5, r25	; 0x05
     7fc:	a6 83       	std	Z+6, r26	; 0x06
     7fe:	b7 83       	std	Z+7, r27	; 0x07
     800:	08 95       	ret

00000802 <__subsf3>:
     802:	50 58       	subi	r21, 0x80	; 128

00000804 <__addsf3>:
     804:	bb 27       	eor	r27, r27
     806:	aa 27       	eor	r26, r26
     808:	0e d0       	rcall	.+28     	; 0x826 <__addsf3x>
     80a:	75 c1       	rjmp	.+746    	; 0xaf6 <__fp_round>
     80c:	66 d1       	rcall	.+716    	; 0xada <__fp_pscA>
     80e:	30 f0       	brcs	.+12     	; 0x81c <__addsf3+0x18>
     810:	6b d1       	rcall	.+726    	; 0xae8 <__fp_pscB>
     812:	20 f0       	brcs	.+8      	; 0x81c <__addsf3+0x18>
     814:	31 f4       	brne	.+12     	; 0x822 <__addsf3+0x1e>
     816:	9f 3f       	cpi	r25, 0xFF	; 255
     818:	11 f4       	brne	.+4      	; 0x81e <__addsf3+0x1a>
     81a:	1e f4       	brtc	.+6      	; 0x822 <__addsf3+0x1e>
     81c:	5b c1       	rjmp	.+694    	; 0xad4 <__fp_nan>
     81e:	0e f4       	brtc	.+2      	; 0x822 <__addsf3+0x1e>
     820:	e0 95       	com	r30
     822:	e7 fb       	bst	r30, 7
     824:	51 c1       	rjmp	.+674    	; 0xac8 <__fp_inf>

00000826 <__addsf3x>:
     826:	e9 2f       	mov	r30, r25
     828:	77 d1       	rcall	.+750    	; 0xb18 <__fp_split3>
     82a:	80 f3       	brcs	.-32     	; 0x80c <__addsf3+0x8>
     82c:	ba 17       	cp	r27, r26
     82e:	62 07       	cpc	r22, r18
     830:	73 07       	cpc	r23, r19
     832:	84 07       	cpc	r24, r20
     834:	95 07       	cpc	r25, r21
     836:	18 f0       	brcs	.+6      	; 0x83e <__addsf3x+0x18>
     838:	71 f4       	brne	.+28     	; 0x856 <__addsf3x+0x30>
     83a:	9e f5       	brtc	.+102    	; 0x8a2 <__addsf3x+0x7c>
     83c:	8f c1       	rjmp	.+798    	; 0xb5c <__fp_zero>
     83e:	0e f4       	brtc	.+2      	; 0x842 <__addsf3x+0x1c>
     840:	e0 95       	com	r30
     842:	0b 2e       	mov	r0, r27
     844:	ba 2f       	mov	r27, r26
     846:	a0 2d       	mov	r26, r0
     848:	0b 01       	movw	r0, r22
     84a:	b9 01       	movw	r22, r18
     84c:	90 01       	movw	r18, r0
     84e:	0c 01       	movw	r0, r24
     850:	ca 01       	movw	r24, r20
     852:	a0 01       	movw	r20, r0
     854:	11 24       	eor	r1, r1
     856:	ff 27       	eor	r31, r31
     858:	59 1b       	sub	r21, r25
     85a:	99 f0       	breq	.+38     	; 0x882 <__addsf3x+0x5c>
     85c:	59 3f       	cpi	r21, 0xF9	; 249
     85e:	50 f4       	brcc	.+20     	; 0x874 <__addsf3x+0x4e>
     860:	50 3e       	cpi	r21, 0xE0	; 224
     862:	68 f1       	brcs	.+90     	; 0x8be <__addsf3x+0x98>
     864:	1a 16       	cp	r1, r26
     866:	f0 40       	sbci	r31, 0x00	; 0
     868:	a2 2f       	mov	r26, r18
     86a:	23 2f       	mov	r18, r19
     86c:	34 2f       	mov	r19, r20
     86e:	44 27       	eor	r20, r20
     870:	58 5f       	subi	r21, 0xF8	; 248
     872:	f3 cf       	rjmp	.-26     	; 0x85a <__addsf3x+0x34>
     874:	46 95       	lsr	r20
     876:	37 95       	ror	r19
     878:	27 95       	ror	r18
     87a:	a7 95       	ror	r26
     87c:	f0 40       	sbci	r31, 0x00	; 0
     87e:	53 95       	inc	r21
     880:	c9 f7       	brne	.-14     	; 0x874 <__addsf3x+0x4e>
     882:	7e f4       	brtc	.+30     	; 0x8a2 <__addsf3x+0x7c>
     884:	1f 16       	cp	r1, r31
     886:	ba 0b       	sbc	r27, r26
     888:	62 0b       	sbc	r22, r18
     88a:	73 0b       	sbc	r23, r19
     88c:	84 0b       	sbc	r24, r20
     88e:	ba f0       	brmi	.+46     	; 0x8be <__addsf3x+0x98>
     890:	91 50       	subi	r25, 0x01	; 1
     892:	a1 f0       	breq	.+40     	; 0x8bc <__addsf3x+0x96>
     894:	ff 0f       	add	r31, r31
     896:	bb 1f       	adc	r27, r27
     898:	66 1f       	adc	r22, r22
     89a:	77 1f       	adc	r23, r23
     89c:	88 1f       	adc	r24, r24
     89e:	c2 f7       	brpl	.-16     	; 0x890 <__addsf3x+0x6a>
     8a0:	0e c0       	rjmp	.+28     	; 0x8be <__addsf3x+0x98>
     8a2:	ba 0f       	add	r27, r26
     8a4:	62 1f       	adc	r22, r18
     8a6:	73 1f       	adc	r23, r19
     8a8:	84 1f       	adc	r24, r20
     8aa:	48 f4       	brcc	.+18     	; 0x8be <__addsf3x+0x98>
     8ac:	87 95       	ror	r24
     8ae:	77 95       	ror	r23
     8b0:	67 95       	ror	r22
     8b2:	b7 95       	ror	r27
     8b4:	f7 95       	ror	r31
     8b6:	9e 3f       	cpi	r25, 0xFE	; 254
     8b8:	08 f0       	brcs	.+2      	; 0x8bc <__addsf3x+0x96>
     8ba:	b3 cf       	rjmp	.-154    	; 0x822 <__addsf3+0x1e>
     8bc:	93 95       	inc	r25
     8be:	88 0f       	add	r24, r24
     8c0:	08 f0       	brcs	.+2      	; 0x8c4 <__addsf3x+0x9e>
     8c2:	99 27       	eor	r25, r25
     8c4:	ee 0f       	add	r30, r30
     8c6:	97 95       	ror	r25
     8c8:	87 95       	ror	r24
     8ca:	08 95       	ret

000008cc <__cmpsf2>:
     8cc:	d9 d0       	rcall	.+434    	; 0xa80 <__fp_cmp>
     8ce:	08 f4       	brcc	.+2      	; 0x8d2 <__cmpsf2+0x6>
     8d0:	81 e0       	ldi	r24, 0x01	; 1
     8d2:	08 95       	ret

000008d4 <__divsf3>:
     8d4:	0c d0       	rcall	.+24     	; 0x8ee <__divsf3x>
     8d6:	0f c1       	rjmp	.+542    	; 0xaf6 <__fp_round>
     8d8:	07 d1       	rcall	.+526    	; 0xae8 <__fp_pscB>
     8da:	40 f0       	brcs	.+16     	; 0x8ec <__divsf3+0x18>
     8dc:	fe d0       	rcall	.+508    	; 0xada <__fp_pscA>
     8de:	30 f0       	brcs	.+12     	; 0x8ec <__divsf3+0x18>
     8e0:	21 f4       	brne	.+8      	; 0x8ea <__divsf3+0x16>
     8e2:	5f 3f       	cpi	r21, 0xFF	; 255
     8e4:	19 f0       	breq	.+6      	; 0x8ec <__divsf3+0x18>
     8e6:	f0 c0       	rjmp	.+480    	; 0xac8 <__fp_inf>
     8e8:	51 11       	cpse	r21, r1
     8ea:	39 c1       	rjmp	.+626    	; 0xb5e <__fp_szero>
     8ec:	f3 c0       	rjmp	.+486    	; 0xad4 <__fp_nan>

000008ee <__divsf3x>:
     8ee:	14 d1       	rcall	.+552    	; 0xb18 <__fp_split3>
     8f0:	98 f3       	brcs	.-26     	; 0x8d8 <__divsf3+0x4>

000008f2 <__divsf3_pse>:
     8f2:	99 23       	and	r25, r25
     8f4:	c9 f3       	breq	.-14     	; 0x8e8 <__divsf3+0x14>
     8f6:	55 23       	and	r21, r21
     8f8:	b1 f3       	breq	.-20     	; 0x8e6 <__divsf3+0x12>
     8fa:	95 1b       	sub	r25, r21
     8fc:	55 0b       	sbc	r21, r21
     8fe:	bb 27       	eor	r27, r27
     900:	aa 27       	eor	r26, r26
     902:	62 17       	cp	r22, r18
     904:	73 07       	cpc	r23, r19
     906:	84 07       	cpc	r24, r20
     908:	38 f0       	brcs	.+14     	; 0x918 <__divsf3_pse+0x26>
     90a:	9f 5f       	subi	r25, 0xFF	; 255
     90c:	5f 4f       	sbci	r21, 0xFF	; 255
     90e:	22 0f       	add	r18, r18
     910:	33 1f       	adc	r19, r19
     912:	44 1f       	adc	r20, r20
     914:	aa 1f       	adc	r26, r26
     916:	a9 f3       	breq	.-22     	; 0x902 <__divsf3_pse+0x10>
     918:	33 d0       	rcall	.+102    	; 0x980 <__divsf3_pse+0x8e>
     91a:	0e 2e       	mov	r0, r30
     91c:	3a f0       	brmi	.+14     	; 0x92c <__divsf3_pse+0x3a>
     91e:	e0 e8       	ldi	r30, 0x80	; 128
     920:	30 d0       	rcall	.+96     	; 0x982 <__divsf3_pse+0x90>
     922:	91 50       	subi	r25, 0x01	; 1
     924:	50 40       	sbci	r21, 0x00	; 0
     926:	e6 95       	lsr	r30
     928:	00 1c       	adc	r0, r0
     92a:	ca f7       	brpl	.-14     	; 0x91e <__divsf3_pse+0x2c>
     92c:	29 d0       	rcall	.+82     	; 0x980 <__divsf3_pse+0x8e>
     92e:	fe 2f       	mov	r31, r30
     930:	27 d0       	rcall	.+78     	; 0x980 <__divsf3_pse+0x8e>
     932:	66 0f       	add	r22, r22
     934:	77 1f       	adc	r23, r23
     936:	88 1f       	adc	r24, r24
     938:	bb 1f       	adc	r27, r27
     93a:	26 17       	cp	r18, r22
     93c:	37 07       	cpc	r19, r23
     93e:	48 07       	cpc	r20, r24
     940:	ab 07       	cpc	r26, r27
     942:	b0 e8       	ldi	r27, 0x80	; 128
     944:	09 f0       	breq	.+2      	; 0x948 <__divsf3_pse+0x56>
     946:	bb 0b       	sbc	r27, r27
     948:	80 2d       	mov	r24, r0
     94a:	bf 01       	movw	r22, r30
     94c:	ff 27       	eor	r31, r31
     94e:	93 58       	subi	r25, 0x83	; 131
     950:	5f 4f       	sbci	r21, 0xFF	; 255
     952:	2a f0       	brmi	.+10     	; 0x95e <__divsf3_pse+0x6c>
     954:	9e 3f       	cpi	r25, 0xFE	; 254
     956:	51 05       	cpc	r21, r1
     958:	68 f0       	brcs	.+26     	; 0x974 <__divsf3_pse+0x82>
     95a:	b6 c0       	rjmp	.+364    	; 0xac8 <__fp_inf>
     95c:	00 c1       	rjmp	.+512    	; 0xb5e <__fp_szero>
     95e:	5f 3f       	cpi	r21, 0xFF	; 255
     960:	ec f3       	brlt	.-6      	; 0x95c <__divsf3_pse+0x6a>
     962:	98 3e       	cpi	r25, 0xE8	; 232
     964:	dc f3       	brlt	.-10     	; 0x95c <__divsf3_pse+0x6a>
     966:	86 95       	lsr	r24
     968:	77 95       	ror	r23
     96a:	67 95       	ror	r22
     96c:	b7 95       	ror	r27
     96e:	f7 95       	ror	r31
     970:	9f 5f       	subi	r25, 0xFF	; 255
     972:	c9 f7       	brne	.-14     	; 0x966 <__divsf3_pse+0x74>
     974:	88 0f       	add	r24, r24
     976:	91 1d       	adc	r25, r1
     978:	96 95       	lsr	r25
     97a:	87 95       	ror	r24
     97c:	97 f9       	bld	r25, 7
     97e:	08 95       	ret
     980:	e1 e0       	ldi	r30, 0x01	; 1
     982:	66 0f       	add	r22, r22
     984:	77 1f       	adc	r23, r23
     986:	88 1f       	adc	r24, r24
     988:	bb 1f       	adc	r27, r27
     98a:	62 17       	cp	r22, r18
     98c:	73 07       	cpc	r23, r19
     98e:	84 07       	cpc	r24, r20
     990:	ba 07       	cpc	r27, r26
     992:	20 f0       	brcs	.+8      	; 0x99c <__divsf3_pse+0xaa>
     994:	62 1b       	sub	r22, r18
     996:	73 0b       	sbc	r23, r19
     998:	84 0b       	sbc	r24, r20
     99a:	ba 0b       	sbc	r27, r26
     99c:	ee 1f       	adc	r30, r30
     99e:	88 f7       	brcc	.-30     	; 0x982 <__divsf3_pse+0x90>
     9a0:	e0 95       	com	r30
     9a2:	08 95       	ret

000009a4 <__fixsfsi>:
     9a4:	04 d0       	rcall	.+8      	; 0x9ae <__fixunssfsi>
     9a6:	68 94       	set
     9a8:	b1 11       	cpse	r27, r1
     9aa:	d9 c0       	rjmp	.+434    	; 0xb5e <__fp_szero>
     9ac:	08 95       	ret

000009ae <__fixunssfsi>:
     9ae:	bc d0       	rcall	.+376    	; 0xb28 <__fp_splitA>
     9b0:	88 f0       	brcs	.+34     	; 0x9d4 <__fixunssfsi+0x26>
     9b2:	9f 57       	subi	r25, 0x7F	; 127
     9b4:	90 f0       	brcs	.+36     	; 0x9da <__fixunssfsi+0x2c>
     9b6:	b9 2f       	mov	r27, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	b7 51       	subi	r27, 0x17	; 23
     9bc:	a0 f0       	brcs	.+40     	; 0x9e6 <__fixunssfsi+0x38>
     9be:	d1 f0       	breq	.+52     	; 0x9f4 <__fixunssfsi+0x46>
     9c0:	66 0f       	add	r22, r22
     9c2:	77 1f       	adc	r23, r23
     9c4:	88 1f       	adc	r24, r24
     9c6:	99 1f       	adc	r25, r25
     9c8:	1a f0       	brmi	.+6      	; 0x9d0 <__fixunssfsi+0x22>
     9ca:	ba 95       	dec	r27
     9cc:	c9 f7       	brne	.-14     	; 0x9c0 <__fixunssfsi+0x12>
     9ce:	12 c0       	rjmp	.+36     	; 0x9f4 <__fixunssfsi+0x46>
     9d0:	b1 30       	cpi	r27, 0x01	; 1
     9d2:	81 f0       	breq	.+32     	; 0x9f4 <__fixunssfsi+0x46>
     9d4:	c3 d0       	rcall	.+390    	; 0xb5c <__fp_zero>
     9d6:	b1 e0       	ldi	r27, 0x01	; 1
     9d8:	08 95       	ret
     9da:	c0 c0       	rjmp	.+384    	; 0xb5c <__fp_zero>
     9dc:	67 2f       	mov	r22, r23
     9de:	78 2f       	mov	r23, r24
     9e0:	88 27       	eor	r24, r24
     9e2:	b8 5f       	subi	r27, 0xF8	; 248
     9e4:	39 f0       	breq	.+14     	; 0x9f4 <__fixunssfsi+0x46>
     9e6:	b9 3f       	cpi	r27, 0xF9	; 249
     9e8:	cc f3       	brlt	.-14     	; 0x9dc <__fixunssfsi+0x2e>
     9ea:	86 95       	lsr	r24
     9ec:	77 95       	ror	r23
     9ee:	67 95       	ror	r22
     9f0:	b3 95       	inc	r27
     9f2:	d9 f7       	brne	.-10     	; 0x9ea <__fixunssfsi+0x3c>
     9f4:	3e f4       	brtc	.+14     	; 0xa04 <__fixunssfsi+0x56>
     9f6:	90 95       	com	r25
     9f8:	80 95       	com	r24
     9fa:	70 95       	com	r23
     9fc:	61 95       	neg	r22
     9fe:	7f 4f       	sbci	r23, 0xFF	; 255
     a00:	8f 4f       	sbci	r24, 0xFF	; 255
     a02:	9f 4f       	sbci	r25, 0xFF	; 255
     a04:	08 95       	ret

00000a06 <__floatunsisf>:
     a06:	e8 94       	clt
     a08:	09 c0       	rjmp	.+18     	; 0xa1c <__floatsisf+0x12>

00000a0a <__floatsisf>:
     a0a:	97 fb       	bst	r25, 7
     a0c:	3e f4       	brtc	.+14     	; 0xa1c <__floatsisf+0x12>
     a0e:	90 95       	com	r25
     a10:	80 95       	com	r24
     a12:	70 95       	com	r23
     a14:	61 95       	neg	r22
     a16:	7f 4f       	sbci	r23, 0xFF	; 255
     a18:	8f 4f       	sbci	r24, 0xFF	; 255
     a1a:	9f 4f       	sbci	r25, 0xFF	; 255
     a1c:	99 23       	and	r25, r25
     a1e:	a9 f0       	breq	.+42     	; 0xa4a <__floatsisf+0x40>
     a20:	f9 2f       	mov	r31, r25
     a22:	96 e9       	ldi	r25, 0x96	; 150
     a24:	bb 27       	eor	r27, r27
     a26:	93 95       	inc	r25
     a28:	f6 95       	lsr	r31
     a2a:	87 95       	ror	r24
     a2c:	77 95       	ror	r23
     a2e:	67 95       	ror	r22
     a30:	b7 95       	ror	r27
     a32:	f1 11       	cpse	r31, r1
     a34:	f8 cf       	rjmp	.-16     	; 0xa26 <__floatsisf+0x1c>
     a36:	fa f4       	brpl	.+62     	; 0xa76 <__floatsisf+0x6c>
     a38:	bb 0f       	add	r27, r27
     a3a:	11 f4       	brne	.+4      	; 0xa40 <__floatsisf+0x36>
     a3c:	60 ff       	sbrs	r22, 0
     a3e:	1b c0       	rjmp	.+54     	; 0xa76 <__floatsisf+0x6c>
     a40:	6f 5f       	subi	r22, 0xFF	; 255
     a42:	7f 4f       	sbci	r23, 0xFF	; 255
     a44:	8f 4f       	sbci	r24, 0xFF	; 255
     a46:	9f 4f       	sbci	r25, 0xFF	; 255
     a48:	16 c0       	rjmp	.+44     	; 0xa76 <__floatsisf+0x6c>
     a4a:	88 23       	and	r24, r24
     a4c:	11 f0       	breq	.+4      	; 0xa52 <__floatsisf+0x48>
     a4e:	96 e9       	ldi	r25, 0x96	; 150
     a50:	11 c0       	rjmp	.+34     	; 0xa74 <__floatsisf+0x6a>
     a52:	77 23       	and	r23, r23
     a54:	21 f0       	breq	.+8      	; 0xa5e <__floatsisf+0x54>
     a56:	9e e8       	ldi	r25, 0x8E	; 142
     a58:	87 2f       	mov	r24, r23
     a5a:	76 2f       	mov	r23, r22
     a5c:	05 c0       	rjmp	.+10     	; 0xa68 <__floatsisf+0x5e>
     a5e:	66 23       	and	r22, r22
     a60:	71 f0       	breq	.+28     	; 0xa7e <__floatsisf+0x74>
     a62:	96 e8       	ldi	r25, 0x86	; 134
     a64:	86 2f       	mov	r24, r22
     a66:	70 e0       	ldi	r23, 0x00	; 0
     a68:	60 e0       	ldi	r22, 0x00	; 0
     a6a:	2a f0       	brmi	.+10     	; 0xa76 <__floatsisf+0x6c>
     a6c:	9a 95       	dec	r25
     a6e:	66 0f       	add	r22, r22
     a70:	77 1f       	adc	r23, r23
     a72:	88 1f       	adc	r24, r24
     a74:	da f7       	brpl	.-10     	; 0xa6c <__floatsisf+0x62>
     a76:	88 0f       	add	r24, r24
     a78:	96 95       	lsr	r25
     a7a:	87 95       	ror	r24
     a7c:	97 f9       	bld	r25, 7
     a7e:	08 95       	ret

00000a80 <__fp_cmp>:
     a80:	99 0f       	add	r25, r25
     a82:	00 08       	sbc	r0, r0
     a84:	55 0f       	add	r21, r21
     a86:	aa 0b       	sbc	r26, r26
     a88:	e0 e8       	ldi	r30, 0x80	; 128
     a8a:	fe ef       	ldi	r31, 0xFE	; 254
     a8c:	16 16       	cp	r1, r22
     a8e:	17 06       	cpc	r1, r23
     a90:	e8 07       	cpc	r30, r24
     a92:	f9 07       	cpc	r31, r25
     a94:	c0 f0       	brcs	.+48     	; 0xac6 <__fp_cmp+0x46>
     a96:	12 16       	cp	r1, r18
     a98:	13 06       	cpc	r1, r19
     a9a:	e4 07       	cpc	r30, r20
     a9c:	f5 07       	cpc	r31, r21
     a9e:	98 f0       	brcs	.+38     	; 0xac6 <__fp_cmp+0x46>
     aa0:	62 1b       	sub	r22, r18
     aa2:	73 0b       	sbc	r23, r19
     aa4:	84 0b       	sbc	r24, r20
     aa6:	95 0b       	sbc	r25, r21
     aa8:	39 f4       	brne	.+14     	; 0xab8 <__fp_cmp+0x38>
     aaa:	0a 26       	eor	r0, r26
     aac:	61 f0       	breq	.+24     	; 0xac6 <__fp_cmp+0x46>
     aae:	23 2b       	or	r18, r19
     ab0:	24 2b       	or	r18, r20
     ab2:	25 2b       	or	r18, r21
     ab4:	21 f4       	brne	.+8      	; 0xabe <__fp_cmp+0x3e>
     ab6:	08 95       	ret
     ab8:	0a 26       	eor	r0, r26
     aba:	09 f4       	brne	.+2      	; 0xabe <__fp_cmp+0x3e>
     abc:	a1 40       	sbci	r26, 0x01	; 1
     abe:	a6 95       	lsr	r26
     ac0:	8f ef       	ldi	r24, 0xFF	; 255
     ac2:	81 1d       	adc	r24, r1
     ac4:	81 1d       	adc	r24, r1
     ac6:	08 95       	ret

00000ac8 <__fp_inf>:
     ac8:	97 f9       	bld	r25, 7
     aca:	9f 67       	ori	r25, 0x7F	; 127
     acc:	80 e8       	ldi	r24, 0x80	; 128
     ace:	70 e0       	ldi	r23, 0x00	; 0
     ad0:	60 e0       	ldi	r22, 0x00	; 0
     ad2:	08 95       	ret

00000ad4 <__fp_nan>:
     ad4:	9f ef       	ldi	r25, 0xFF	; 255
     ad6:	80 ec       	ldi	r24, 0xC0	; 192
     ad8:	08 95       	ret

00000ada <__fp_pscA>:
     ada:	00 24       	eor	r0, r0
     adc:	0a 94       	dec	r0
     ade:	16 16       	cp	r1, r22
     ae0:	17 06       	cpc	r1, r23
     ae2:	18 06       	cpc	r1, r24
     ae4:	09 06       	cpc	r0, r25
     ae6:	08 95       	ret

00000ae8 <__fp_pscB>:
     ae8:	00 24       	eor	r0, r0
     aea:	0a 94       	dec	r0
     aec:	12 16       	cp	r1, r18
     aee:	13 06       	cpc	r1, r19
     af0:	14 06       	cpc	r1, r20
     af2:	05 06       	cpc	r0, r21
     af4:	08 95       	ret

00000af6 <__fp_round>:
     af6:	09 2e       	mov	r0, r25
     af8:	03 94       	inc	r0
     afa:	00 0c       	add	r0, r0
     afc:	11 f4       	brne	.+4      	; 0xb02 <__fp_round+0xc>
     afe:	88 23       	and	r24, r24
     b00:	52 f0       	brmi	.+20     	; 0xb16 <__fp_round+0x20>
     b02:	bb 0f       	add	r27, r27
     b04:	40 f4       	brcc	.+16     	; 0xb16 <__fp_round+0x20>
     b06:	bf 2b       	or	r27, r31
     b08:	11 f4       	brne	.+4      	; 0xb0e <__fp_round+0x18>
     b0a:	60 ff       	sbrs	r22, 0
     b0c:	04 c0       	rjmp	.+8      	; 0xb16 <__fp_round+0x20>
     b0e:	6f 5f       	subi	r22, 0xFF	; 255
     b10:	7f 4f       	sbci	r23, 0xFF	; 255
     b12:	8f 4f       	sbci	r24, 0xFF	; 255
     b14:	9f 4f       	sbci	r25, 0xFF	; 255
     b16:	08 95       	ret

00000b18 <__fp_split3>:
     b18:	57 fd       	sbrc	r21, 7
     b1a:	90 58       	subi	r25, 0x80	; 128
     b1c:	44 0f       	add	r20, r20
     b1e:	55 1f       	adc	r21, r21
     b20:	59 f0       	breq	.+22     	; 0xb38 <__fp_splitA+0x10>
     b22:	5f 3f       	cpi	r21, 0xFF	; 255
     b24:	71 f0       	breq	.+28     	; 0xb42 <__fp_splitA+0x1a>
     b26:	47 95       	ror	r20

00000b28 <__fp_splitA>:
     b28:	88 0f       	add	r24, r24
     b2a:	97 fb       	bst	r25, 7
     b2c:	99 1f       	adc	r25, r25
     b2e:	61 f0       	breq	.+24     	; 0xb48 <__fp_splitA+0x20>
     b30:	9f 3f       	cpi	r25, 0xFF	; 255
     b32:	79 f0       	breq	.+30     	; 0xb52 <__fp_splitA+0x2a>
     b34:	87 95       	ror	r24
     b36:	08 95       	ret
     b38:	12 16       	cp	r1, r18
     b3a:	13 06       	cpc	r1, r19
     b3c:	14 06       	cpc	r1, r20
     b3e:	55 1f       	adc	r21, r21
     b40:	f2 cf       	rjmp	.-28     	; 0xb26 <__fp_split3+0xe>
     b42:	46 95       	lsr	r20
     b44:	f1 df       	rcall	.-30     	; 0xb28 <__fp_splitA>
     b46:	08 c0       	rjmp	.+16     	; 0xb58 <__fp_splitA+0x30>
     b48:	16 16       	cp	r1, r22
     b4a:	17 06       	cpc	r1, r23
     b4c:	18 06       	cpc	r1, r24
     b4e:	99 1f       	adc	r25, r25
     b50:	f1 cf       	rjmp	.-30     	; 0xb34 <__fp_splitA+0xc>
     b52:	86 95       	lsr	r24
     b54:	71 05       	cpc	r23, r1
     b56:	61 05       	cpc	r22, r1
     b58:	08 94       	sec
     b5a:	08 95       	ret

00000b5c <__fp_zero>:
     b5c:	e8 94       	clt

00000b5e <__fp_szero>:
     b5e:	bb 27       	eor	r27, r27
     b60:	66 27       	eor	r22, r22
     b62:	77 27       	eor	r23, r23
     b64:	cb 01       	movw	r24, r22
     b66:	97 f9       	bld	r25, 7
     b68:	08 95       	ret

00000b6a <__gesf2>:
     b6a:	8a df       	rcall	.-236    	; 0xa80 <__fp_cmp>
     b6c:	08 f4       	brcc	.+2      	; 0xb70 <__gesf2+0x6>
     b6e:	8f ef       	ldi	r24, 0xFF	; 255
     b70:	08 95       	ret

00000b72 <modf>:
     b72:	fa 01       	movw	r30, r20
     b74:	dc 01       	movw	r26, r24
     b76:	aa 0f       	add	r26, r26
     b78:	bb 1f       	adc	r27, r27
     b7a:	9b 01       	movw	r18, r22
     b7c:	ac 01       	movw	r20, r24
     b7e:	bf 57       	subi	r27, 0x7F	; 127
     b80:	28 f4       	brcc	.+10     	; 0xb8c <modf+0x1a>
     b82:	22 27       	eor	r18, r18
     b84:	33 27       	eor	r19, r19
     b86:	44 27       	eor	r20, r20
     b88:	50 78       	andi	r21, 0x80	; 128
     b8a:	1f c0       	rjmp	.+62     	; 0xbca <modf+0x58>
     b8c:	b7 51       	subi	r27, 0x17	; 23
     b8e:	88 f4       	brcc	.+34     	; 0xbb2 <modf+0x40>
     b90:	ab 2f       	mov	r26, r27
     b92:	00 24       	eor	r0, r0
     b94:	46 95       	lsr	r20
     b96:	37 95       	ror	r19
     b98:	27 95       	ror	r18
     b9a:	01 1c       	adc	r0, r1
     b9c:	a3 95       	inc	r26
     b9e:	d2 f3       	brmi	.-12     	; 0xb94 <modf+0x22>
     ba0:	00 20       	and	r0, r0
     ba2:	69 f0       	breq	.+26     	; 0xbbe <modf+0x4c>
     ba4:	22 0f       	add	r18, r18
     ba6:	33 1f       	adc	r19, r19
     ba8:	44 1f       	adc	r20, r20
     baa:	b3 95       	inc	r27
     bac:	da f3       	brmi	.-10     	; 0xba4 <modf+0x32>
     bae:	0d d0       	rcall	.+26     	; 0xbca <modf+0x58>
     bb0:	28 ce       	rjmp	.-944    	; 0x802 <__subsf3>
     bb2:	61 30       	cpi	r22, 0x01	; 1
     bb4:	71 05       	cpc	r23, r1
     bb6:	a0 e8       	ldi	r26, 0x80	; 128
     bb8:	8a 07       	cpc	r24, r26
     bba:	b9 46       	sbci	r27, 0x69	; 105
     bbc:	30 f4       	brcc	.+12     	; 0xbca <modf+0x58>
     bbe:	9b 01       	movw	r18, r22
     bc0:	ac 01       	movw	r20, r24
     bc2:	66 27       	eor	r22, r22
     bc4:	77 27       	eor	r23, r23
     bc6:	88 27       	eor	r24, r24
     bc8:	90 78       	andi	r25, 0x80	; 128
     bca:	30 96       	adiw	r30, 0x00	; 0
     bcc:	21 f0       	breq	.+8      	; 0xbd6 <modf+0x64>
     bce:	20 83       	st	Z, r18
     bd0:	31 83       	std	Z+1, r19	; 0x01
     bd2:	42 83       	std	Z+2, r20	; 0x02
     bd4:	53 83       	std	Z+3, r21	; 0x03
     bd6:	08 95       	ret

00000bd8 <__mulsf3>:
     bd8:	0b d0       	rcall	.+22     	; 0xbf0 <__mulsf3x>
     bda:	8d cf       	rjmp	.-230    	; 0xaf6 <__fp_round>
     bdc:	7e df       	rcall	.-260    	; 0xada <__fp_pscA>
     bde:	28 f0       	brcs	.+10     	; 0xbea <__mulsf3+0x12>
     be0:	83 df       	rcall	.-250    	; 0xae8 <__fp_pscB>
     be2:	18 f0       	brcs	.+6      	; 0xbea <__mulsf3+0x12>
     be4:	95 23       	and	r25, r21
     be6:	09 f0       	breq	.+2      	; 0xbea <__mulsf3+0x12>
     be8:	6f cf       	rjmp	.-290    	; 0xac8 <__fp_inf>
     bea:	74 cf       	rjmp	.-280    	; 0xad4 <__fp_nan>
     bec:	11 24       	eor	r1, r1
     bee:	b7 cf       	rjmp	.-146    	; 0xb5e <__fp_szero>

00000bf0 <__mulsf3x>:
     bf0:	93 df       	rcall	.-218    	; 0xb18 <__fp_split3>
     bf2:	a0 f3       	brcs	.-24     	; 0xbdc <__mulsf3+0x4>

00000bf4 <__mulsf3_pse>:
     bf4:	95 9f       	mul	r25, r21
     bf6:	d1 f3       	breq	.-12     	; 0xbec <__mulsf3+0x14>
     bf8:	95 0f       	add	r25, r21
     bfa:	50 e0       	ldi	r21, 0x00	; 0
     bfc:	55 1f       	adc	r21, r21
     bfe:	62 9f       	mul	r22, r18
     c00:	f0 01       	movw	r30, r0
     c02:	72 9f       	mul	r23, r18
     c04:	bb 27       	eor	r27, r27
     c06:	f0 0d       	add	r31, r0
     c08:	b1 1d       	adc	r27, r1
     c0a:	63 9f       	mul	r22, r19
     c0c:	aa 27       	eor	r26, r26
     c0e:	f0 0d       	add	r31, r0
     c10:	b1 1d       	adc	r27, r1
     c12:	aa 1f       	adc	r26, r26
     c14:	64 9f       	mul	r22, r20
     c16:	66 27       	eor	r22, r22
     c18:	b0 0d       	add	r27, r0
     c1a:	a1 1d       	adc	r26, r1
     c1c:	66 1f       	adc	r22, r22
     c1e:	82 9f       	mul	r24, r18
     c20:	22 27       	eor	r18, r18
     c22:	b0 0d       	add	r27, r0
     c24:	a1 1d       	adc	r26, r1
     c26:	62 1f       	adc	r22, r18
     c28:	73 9f       	mul	r23, r19
     c2a:	b0 0d       	add	r27, r0
     c2c:	a1 1d       	adc	r26, r1
     c2e:	62 1f       	adc	r22, r18
     c30:	83 9f       	mul	r24, r19
     c32:	a0 0d       	add	r26, r0
     c34:	61 1d       	adc	r22, r1
     c36:	22 1f       	adc	r18, r18
     c38:	74 9f       	mul	r23, r20
     c3a:	33 27       	eor	r19, r19
     c3c:	a0 0d       	add	r26, r0
     c3e:	61 1d       	adc	r22, r1
     c40:	23 1f       	adc	r18, r19
     c42:	84 9f       	mul	r24, r20
     c44:	60 0d       	add	r22, r0
     c46:	21 1d       	adc	r18, r1
     c48:	82 2f       	mov	r24, r18
     c4a:	76 2f       	mov	r23, r22
     c4c:	6a 2f       	mov	r22, r26
     c4e:	11 24       	eor	r1, r1
     c50:	9f 57       	subi	r25, 0x7F	; 127
     c52:	50 40       	sbci	r21, 0x00	; 0
     c54:	8a f0       	brmi	.+34     	; 0xc78 <__mulsf3_pse+0x84>
     c56:	e1 f0       	breq	.+56     	; 0xc90 <__mulsf3_pse+0x9c>
     c58:	88 23       	and	r24, r24
     c5a:	4a f0       	brmi	.+18     	; 0xc6e <__mulsf3_pse+0x7a>
     c5c:	ee 0f       	add	r30, r30
     c5e:	ff 1f       	adc	r31, r31
     c60:	bb 1f       	adc	r27, r27
     c62:	66 1f       	adc	r22, r22
     c64:	77 1f       	adc	r23, r23
     c66:	88 1f       	adc	r24, r24
     c68:	91 50       	subi	r25, 0x01	; 1
     c6a:	50 40       	sbci	r21, 0x00	; 0
     c6c:	a9 f7       	brne	.-22     	; 0xc58 <__mulsf3_pse+0x64>
     c6e:	9e 3f       	cpi	r25, 0xFE	; 254
     c70:	51 05       	cpc	r21, r1
     c72:	70 f0       	brcs	.+28     	; 0xc90 <__mulsf3_pse+0x9c>
     c74:	29 cf       	rjmp	.-430    	; 0xac8 <__fp_inf>
     c76:	73 cf       	rjmp	.-282    	; 0xb5e <__fp_szero>
     c78:	5f 3f       	cpi	r21, 0xFF	; 255
     c7a:	ec f3       	brlt	.-6      	; 0xc76 <__mulsf3_pse+0x82>
     c7c:	98 3e       	cpi	r25, 0xE8	; 232
     c7e:	dc f3       	brlt	.-10     	; 0xc76 <__mulsf3_pse+0x82>
     c80:	86 95       	lsr	r24
     c82:	77 95       	ror	r23
     c84:	67 95       	ror	r22
     c86:	b7 95       	ror	r27
     c88:	f7 95       	ror	r31
     c8a:	e7 95       	ror	r30
     c8c:	9f 5f       	subi	r25, 0xFF	; 255
     c8e:	c1 f7       	brne	.-16     	; 0xc80 <__mulsf3_pse+0x8c>
     c90:	fe 2b       	or	r31, r30
     c92:	88 0f       	add	r24, r24
     c94:	91 1d       	adc	r25, r1
     c96:	96 95       	lsr	r25
     c98:	87 95       	ror	r24
     c9a:	97 f9       	bld	r25, 7
     c9c:	08 95       	ret

00000c9e <__tablejump2__>:
     c9e:	ee 0f       	add	r30, r30
     ca0:	ff 1f       	adc	r31, r31
     ca2:	05 90       	lpm	r0, Z+
     ca4:	f4 91       	lpm	r31, Z
     ca6:	e0 2d       	mov	r30, r0
     ca8:	09 94       	ijmp

00000caa <sprintf>:
     caa:	ae e0       	ldi	r26, 0x0E	; 14
     cac:	b0 e0       	ldi	r27, 0x00	; 0
     cae:	ea e5       	ldi	r30, 0x5A	; 90
     cb0:	f6 e0       	ldi	r31, 0x06	; 6
     cb2:	ca c2       	rjmp	.+1428   	; 0x1248 <__prologue_saves__+0x1c>
     cb4:	0d 89       	ldd	r16, Y+21	; 0x15
     cb6:	1e 89       	ldd	r17, Y+22	; 0x16
     cb8:	86 e0       	ldi	r24, 0x06	; 6
     cba:	8c 83       	std	Y+4, r24	; 0x04
     cbc:	1a 83       	std	Y+2, r17	; 0x02
     cbe:	09 83       	std	Y+1, r16	; 0x01
     cc0:	8f ef       	ldi	r24, 0xFF	; 255
     cc2:	9f e7       	ldi	r25, 0x7F	; 127
     cc4:	9e 83       	std	Y+6, r25	; 0x06
     cc6:	8d 83       	std	Y+5, r24	; 0x05
     cc8:	ae 01       	movw	r20, r28
     cca:	47 5e       	subi	r20, 0xE7	; 231
     ccc:	5f 4f       	sbci	r21, 0xFF	; 255
     cce:	6f 89       	ldd	r22, Y+23	; 0x17
     cd0:	78 8d       	ldd	r23, Y+24	; 0x18
     cd2:	ce 01       	movw	r24, r28
     cd4:	01 96       	adiw	r24, 0x01	; 1
     cd6:	09 d0       	rcall	.+18     	; 0xcea <vfprintf>
     cd8:	2f 81       	ldd	r18, Y+7	; 0x07
     cda:	38 85       	ldd	r19, Y+8	; 0x08
     cdc:	f8 01       	movw	r30, r16
     cde:	e2 0f       	add	r30, r18
     ce0:	f3 1f       	adc	r31, r19
     ce2:	10 82       	st	Z, r1
     ce4:	2e 96       	adiw	r28, 0x0e	; 14
     ce6:	e4 e0       	ldi	r30, 0x04	; 4
     ce8:	cb c2       	rjmp	.+1430   	; 0x1280 <__epilogue_restores__+0x1c>

00000cea <vfprintf>:
     cea:	ac e0       	ldi	r26, 0x0C	; 12
     cec:	b0 e0       	ldi	r27, 0x00	; 0
     cee:	ea e7       	ldi	r30, 0x7A	; 122
     cf0:	f6 e0       	ldi	r31, 0x06	; 6
     cf2:	9c c2       	rjmp	.+1336   	; 0x122c <__prologue_saves__>
     cf4:	7c 01       	movw	r14, r24
     cf6:	6b 01       	movw	r12, r22
     cf8:	8a 01       	movw	r16, r20
     cfa:	fc 01       	movw	r30, r24
     cfc:	17 82       	std	Z+7, r1	; 0x07
     cfe:	16 82       	std	Z+6, r1	; 0x06
     d00:	83 81       	ldd	r24, Z+3	; 0x03
     d02:	81 ff       	sbrs	r24, 1
     d04:	b0 c1       	rjmp	.+864    	; 0x1066 <vfprintf+0x37c>
     d06:	ce 01       	movw	r24, r28
     d08:	01 96       	adiw	r24, 0x01	; 1
     d0a:	4c 01       	movw	r8, r24
     d0c:	f7 01       	movw	r30, r14
     d0e:	93 81       	ldd	r25, Z+3	; 0x03
     d10:	f6 01       	movw	r30, r12
     d12:	93 fd       	sbrc	r25, 3
     d14:	85 91       	lpm	r24, Z+
     d16:	93 ff       	sbrs	r25, 3
     d18:	81 91       	ld	r24, Z+
     d1a:	6f 01       	movw	r12, r30
     d1c:	88 23       	and	r24, r24
     d1e:	09 f4       	brne	.+2      	; 0xd22 <vfprintf+0x38>
     d20:	9e c1       	rjmp	.+828    	; 0x105e <vfprintf+0x374>
     d22:	85 32       	cpi	r24, 0x25	; 37
     d24:	39 f4       	brne	.+14     	; 0xd34 <vfprintf+0x4a>
     d26:	93 fd       	sbrc	r25, 3
     d28:	85 91       	lpm	r24, Z+
     d2a:	93 ff       	sbrs	r25, 3
     d2c:	81 91       	ld	r24, Z+
     d2e:	6f 01       	movw	r12, r30
     d30:	85 32       	cpi	r24, 0x25	; 37
     d32:	21 f4       	brne	.+8      	; 0xd3c <vfprintf+0x52>
     d34:	b7 01       	movw	r22, r14
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	b1 d1       	rcall	.+866    	; 0x109c <fputc>
     d3a:	e8 cf       	rjmp	.-48     	; 0xd0c <vfprintf+0x22>
     d3c:	51 2c       	mov	r5, r1
     d3e:	31 2c       	mov	r3, r1
     d40:	20 e0       	ldi	r18, 0x00	; 0
     d42:	20 32       	cpi	r18, 0x20	; 32
     d44:	a0 f4       	brcc	.+40     	; 0xd6e <vfprintf+0x84>
     d46:	8b 32       	cpi	r24, 0x2B	; 43
     d48:	69 f0       	breq	.+26     	; 0xd64 <vfprintf+0x7a>
     d4a:	30 f4       	brcc	.+12     	; 0xd58 <vfprintf+0x6e>
     d4c:	80 32       	cpi	r24, 0x20	; 32
     d4e:	59 f0       	breq	.+22     	; 0xd66 <vfprintf+0x7c>
     d50:	83 32       	cpi	r24, 0x23	; 35
     d52:	69 f4       	brne	.+26     	; 0xd6e <vfprintf+0x84>
     d54:	20 61       	ori	r18, 0x10	; 16
     d56:	2c c0       	rjmp	.+88     	; 0xdb0 <vfprintf+0xc6>
     d58:	8d 32       	cpi	r24, 0x2D	; 45
     d5a:	39 f0       	breq	.+14     	; 0xd6a <vfprintf+0x80>
     d5c:	80 33       	cpi	r24, 0x30	; 48
     d5e:	39 f4       	brne	.+14     	; 0xd6e <vfprintf+0x84>
     d60:	21 60       	ori	r18, 0x01	; 1
     d62:	26 c0       	rjmp	.+76     	; 0xdb0 <vfprintf+0xc6>
     d64:	22 60       	ori	r18, 0x02	; 2
     d66:	24 60       	ori	r18, 0x04	; 4
     d68:	23 c0       	rjmp	.+70     	; 0xdb0 <vfprintf+0xc6>
     d6a:	28 60       	ori	r18, 0x08	; 8
     d6c:	21 c0       	rjmp	.+66     	; 0xdb0 <vfprintf+0xc6>
     d6e:	27 fd       	sbrc	r18, 7
     d70:	27 c0       	rjmp	.+78     	; 0xdc0 <vfprintf+0xd6>
     d72:	30 ed       	ldi	r19, 0xD0	; 208
     d74:	38 0f       	add	r19, r24
     d76:	3a 30       	cpi	r19, 0x0A	; 10
     d78:	78 f4       	brcc	.+30     	; 0xd98 <vfprintf+0xae>
     d7a:	26 ff       	sbrs	r18, 6
     d7c:	06 c0       	rjmp	.+12     	; 0xd8a <vfprintf+0xa0>
     d7e:	fa e0       	ldi	r31, 0x0A	; 10
     d80:	5f 9e       	mul	r5, r31
     d82:	30 0d       	add	r19, r0
     d84:	11 24       	eor	r1, r1
     d86:	53 2e       	mov	r5, r19
     d88:	13 c0       	rjmp	.+38     	; 0xdb0 <vfprintf+0xc6>
     d8a:	8a e0       	ldi	r24, 0x0A	; 10
     d8c:	38 9e       	mul	r3, r24
     d8e:	30 0d       	add	r19, r0
     d90:	11 24       	eor	r1, r1
     d92:	33 2e       	mov	r3, r19
     d94:	20 62       	ori	r18, 0x20	; 32
     d96:	0c c0       	rjmp	.+24     	; 0xdb0 <vfprintf+0xc6>
     d98:	8e 32       	cpi	r24, 0x2E	; 46
     d9a:	21 f4       	brne	.+8      	; 0xda4 <vfprintf+0xba>
     d9c:	26 fd       	sbrc	r18, 6
     d9e:	5f c1       	rjmp	.+702    	; 0x105e <vfprintf+0x374>
     da0:	20 64       	ori	r18, 0x40	; 64
     da2:	06 c0       	rjmp	.+12     	; 0xdb0 <vfprintf+0xc6>
     da4:	8c 36       	cpi	r24, 0x6C	; 108
     da6:	11 f4       	brne	.+4      	; 0xdac <vfprintf+0xc2>
     da8:	20 68       	ori	r18, 0x80	; 128
     daa:	02 c0       	rjmp	.+4      	; 0xdb0 <vfprintf+0xc6>
     dac:	88 36       	cpi	r24, 0x68	; 104
     dae:	41 f4       	brne	.+16     	; 0xdc0 <vfprintf+0xd6>
     db0:	f6 01       	movw	r30, r12
     db2:	93 fd       	sbrc	r25, 3
     db4:	85 91       	lpm	r24, Z+
     db6:	93 ff       	sbrs	r25, 3
     db8:	81 91       	ld	r24, Z+
     dba:	6f 01       	movw	r12, r30
     dbc:	81 11       	cpse	r24, r1
     dbe:	c1 cf       	rjmp	.-126    	; 0xd42 <vfprintf+0x58>
     dc0:	98 2f       	mov	r25, r24
     dc2:	9f 7d       	andi	r25, 0xDF	; 223
     dc4:	95 54       	subi	r25, 0x45	; 69
     dc6:	93 30       	cpi	r25, 0x03	; 3
     dc8:	28 f4       	brcc	.+10     	; 0xdd4 <vfprintf+0xea>
     dca:	0c 5f       	subi	r16, 0xFC	; 252
     dcc:	1f 4f       	sbci	r17, 0xFF	; 255
     dce:	ff e3       	ldi	r31, 0x3F	; 63
     dd0:	f9 83       	std	Y+1, r31	; 0x01
     dd2:	0d c0       	rjmp	.+26     	; 0xdee <vfprintf+0x104>
     dd4:	83 36       	cpi	r24, 0x63	; 99
     dd6:	31 f0       	breq	.+12     	; 0xde4 <vfprintf+0xfa>
     dd8:	83 37       	cpi	r24, 0x73	; 115
     dda:	71 f0       	breq	.+28     	; 0xdf8 <vfprintf+0x10e>
     ddc:	83 35       	cpi	r24, 0x53	; 83
     dde:	09 f0       	breq	.+2      	; 0xde2 <vfprintf+0xf8>
     de0:	57 c0       	rjmp	.+174    	; 0xe90 <vfprintf+0x1a6>
     de2:	21 c0       	rjmp	.+66     	; 0xe26 <vfprintf+0x13c>
     de4:	f8 01       	movw	r30, r16
     de6:	80 81       	ld	r24, Z
     de8:	89 83       	std	Y+1, r24	; 0x01
     dea:	0e 5f       	subi	r16, 0xFE	; 254
     dec:	1f 4f       	sbci	r17, 0xFF	; 255
     dee:	44 24       	eor	r4, r4
     df0:	43 94       	inc	r4
     df2:	51 2c       	mov	r5, r1
     df4:	54 01       	movw	r10, r8
     df6:	14 c0       	rjmp	.+40     	; 0xe20 <vfprintf+0x136>
     df8:	38 01       	movw	r6, r16
     dfa:	f2 e0       	ldi	r31, 0x02	; 2
     dfc:	6f 0e       	add	r6, r31
     dfe:	71 1c       	adc	r7, r1
     e00:	f8 01       	movw	r30, r16
     e02:	a0 80       	ld	r10, Z
     e04:	b1 80       	ldd	r11, Z+1	; 0x01
     e06:	26 ff       	sbrs	r18, 6
     e08:	03 c0       	rjmp	.+6      	; 0xe10 <vfprintf+0x126>
     e0a:	65 2d       	mov	r22, r5
     e0c:	70 e0       	ldi	r23, 0x00	; 0
     e0e:	02 c0       	rjmp	.+4      	; 0xe14 <vfprintf+0x12a>
     e10:	6f ef       	ldi	r22, 0xFF	; 255
     e12:	7f ef       	ldi	r23, 0xFF	; 255
     e14:	c5 01       	movw	r24, r10
     e16:	2c 87       	std	Y+12, r18	; 0x0c
     e18:	36 d1       	rcall	.+620    	; 0x1086 <strnlen>
     e1a:	2c 01       	movw	r4, r24
     e1c:	83 01       	movw	r16, r6
     e1e:	2c 85       	ldd	r18, Y+12	; 0x0c
     e20:	2f 77       	andi	r18, 0x7F	; 127
     e22:	22 2e       	mov	r2, r18
     e24:	16 c0       	rjmp	.+44     	; 0xe52 <vfprintf+0x168>
     e26:	38 01       	movw	r6, r16
     e28:	f2 e0       	ldi	r31, 0x02	; 2
     e2a:	6f 0e       	add	r6, r31
     e2c:	71 1c       	adc	r7, r1
     e2e:	f8 01       	movw	r30, r16
     e30:	a0 80       	ld	r10, Z
     e32:	b1 80       	ldd	r11, Z+1	; 0x01
     e34:	26 ff       	sbrs	r18, 6
     e36:	03 c0       	rjmp	.+6      	; 0xe3e <vfprintf+0x154>
     e38:	65 2d       	mov	r22, r5
     e3a:	70 e0       	ldi	r23, 0x00	; 0
     e3c:	02 c0       	rjmp	.+4      	; 0xe42 <vfprintf+0x158>
     e3e:	6f ef       	ldi	r22, 0xFF	; 255
     e40:	7f ef       	ldi	r23, 0xFF	; 255
     e42:	c5 01       	movw	r24, r10
     e44:	2c 87       	std	Y+12, r18	; 0x0c
     e46:	14 d1       	rcall	.+552    	; 0x1070 <strnlen_P>
     e48:	2c 01       	movw	r4, r24
     e4a:	2c 85       	ldd	r18, Y+12	; 0x0c
     e4c:	20 68       	ori	r18, 0x80	; 128
     e4e:	22 2e       	mov	r2, r18
     e50:	83 01       	movw	r16, r6
     e52:	23 fc       	sbrc	r2, 3
     e54:	19 c0       	rjmp	.+50     	; 0xe88 <vfprintf+0x19e>
     e56:	83 2d       	mov	r24, r3
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	48 16       	cp	r4, r24
     e5c:	59 06       	cpc	r5, r25
     e5e:	a0 f4       	brcc	.+40     	; 0xe88 <vfprintf+0x19e>
     e60:	b7 01       	movw	r22, r14
     e62:	80 e2       	ldi	r24, 0x20	; 32
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	1a d1       	rcall	.+564    	; 0x109c <fputc>
     e68:	3a 94       	dec	r3
     e6a:	f5 cf       	rjmp	.-22     	; 0xe56 <vfprintf+0x16c>
     e6c:	f5 01       	movw	r30, r10
     e6e:	27 fc       	sbrc	r2, 7
     e70:	85 91       	lpm	r24, Z+
     e72:	27 fe       	sbrs	r2, 7
     e74:	81 91       	ld	r24, Z+
     e76:	5f 01       	movw	r10, r30
     e78:	b7 01       	movw	r22, r14
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	0f d1       	rcall	.+542    	; 0x109c <fputc>
     e7e:	31 10       	cpse	r3, r1
     e80:	3a 94       	dec	r3
     e82:	f1 e0       	ldi	r31, 0x01	; 1
     e84:	4f 1a       	sub	r4, r31
     e86:	51 08       	sbc	r5, r1
     e88:	41 14       	cp	r4, r1
     e8a:	51 04       	cpc	r5, r1
     e8c:	79 f7       	brne	.-34     	; 0xe6c <vfprintf+0x182>
     e8e:	de c0       	rjmp	.+444    	; 0x104c <vfprintf+0x362>
     e90:	84 36       	cpi	r24, 0x64	; 100
     e92:	11 f0       	breq	.+4      	; 0xe98 <vfprintf+0x1ae>
     e94:	89 36       	cpi	r24, 0x69	; 105
     e96:	31 f5       	brne	.+76     	; 0xee4 <vfprintf+0x1fa>
     e98:	f8 01       	movw	r30, r16
     e9a:	27 ff       	sbrs	r18, 7
     e9c:	07 c0       	rjmp	.+14     	; 0xeac <vfprintf+0x1c2>
     e9e:	60 81       	ld	r22, Z
     ea0:	71 81       	ldd	r23, Z+1	; 0x01
     ea2:	82 81       	ldd	r24, Z+2	; 0x02
     ea4:	93 81       	ldd	r25, Z+3	; 0x03
     ea6:	0c 5f       	subi	r16, 0xFC	; 252
     ea8:	1f 4f       	sbci	r17, 0xFF	; 255
     eaa:	08 c0       	rjmp	.+16     	; 0xebc <vfprintf+0x1d2>
     eac:	60 81       	ld	r22, Z
     eae:	71 81       	ldd	r23, Z+1	; 0x01
     eb0:	07 2e       	mov	r0, r23
     eb2:	00 0c       	add	r0, r0
     eb4:	88 0b       	sbc	r24, r24
     eb6:	99 0b       	sbc	r25, r25
     eb8:	0e 5f       	subi	r16, 0xFE	; 254
     eba:	1f 4f       	sbci	r17, 0xFF	; 255
     ebc:	2f 76       	andi	r18, 0x6F	; 111
     ebe:	72 2e       	mov	r7, r18
     ec0:	97 ff       	sbrs	r25, 7
     ec2:	09 c0       	rjmp	.+18     	; 0xed6 <vfprintf+0x1ec>
     ec4:	90 95       	com	r25
     ec6:	80 95       	com	r24
     ec8:	70 95       	com	r23
     eca:	61 95       	neg	r22
     ecc:	7f 4f       	sbci	r23, 0xFF	; 255
     ece:	8f 4f       	sbci	r24, 0xFF	; 255
     ed0:	9f 4f       	sbci	r25, 0xFF	; 255
     ed2:	20 68       	ori	r18, 0x80	; 128
     ed4:	72 2e       	mov	r7, r18
     ed6:	2a e0       	ldi	r18, 0x0A	; 10
     ed8:	30 e0       	ldi	r19, 0x00	; 0
     eda:	a4 01       	movw	r20, r8
     edc:	17 d1       	rcall	.+558    	; 0x110c <__ultoa_invert>
     ede:	a8 2e       	mov	r10, r24
     ee0:	a8 18       	sub	r10, r8
     ee2:	43 c0       	rjmp	.+134    	; 0xf6a <vfprintf+0x280>
     ee4:	85 37       	cpi	r24, 0x75	; 117
     ee6:	29 f4       	brne	.+10     	; 0xef2 <vfprintf+0x208>
     ee8:	2f 7e       	andi	r18, 0xEF	; 239
     eea:	b2 2e       	mov	r11, r18
     eec:	2a e0       	ldi	r18, 0x0A	; 10
     eee:	30 e0       	ldi	r19, 0x00	; 0
     ef0:	25 c0       	rjmp	.+74     	; 0xf3c <vfprintf+0x252>
     ef2:	f2 2f       	mov	r31, r18
     ef4:	f9 7f       	andi	r31, 0xF9	; 249
     ef6:	bf 2e       	mov	r11, r31
     ef8:	8f 36       	cpi	r24, 0x6F	; 111
     efa:	c1 f0       	breq	.+48     	; 0xf2c <vfprintf+0x242>
     efc:	18 f4       	brcc	.+6      	; 0xf04 <vfprintf+0x21a>
     efe:	88 35       	cpi	r24, 0x58	; 88
     f00:	79 f0       	breq	.+30     	; 0xf20 <vfprintf+0x236>
     f02:	ad c0       	rjmp	.+346    	; 0x105e <vfprintf+0x374>
     f04:	80 37       	cpi	r24, 0x70	; 112
     f06:	19 f0       	breq	.+6      	; 0xf0e <vfprintf+0x224>
     f08:	88 37       	cpi	r24, 0x78	; 120
     f0a:	21 f0       	breq	.+8      	; 0xf14 <vfprintf+0x22a>
     f0c:	a8 c0       	rjmp	.+336    	; 0x105e <vfprintf+0x374>
     f0e:	2f 2f       	mov	r18, r31
     f10:	20 61       	ori	r18, 0x10	; 16
     f12:	b2 2e       	mov	r11, r18
     f14:	b4 fe       	sbrs	r11, 4
     f16:	0d c0       	rjmp	.+26     	; 0xf32 <vfprintf+0x248>
     f18:	8b 2d       	mov	r24, r11
     f1a:	84 60       	ori	r24, 0x04	; 4
     f1c:	b8 2e       	mov	r11, r24
     f1e:	09 c0       	rjmp	.+18     	; 0xf32 <vfprintf+0x248>
     f20:	24 ff       	sbrs	r18, 4
     f22:	0a c0       	rjmp	.+20     	; 0xf38 <vfprintf+0x24e>
     f24:	9f 2f       	mov	r25, r31
     f26:	96 60       	ori	r25, 0x06	; 6
     f28:	b9 2e       	mov	r11, r25
     f2a:	06 c0       	rjmp	.+12     	; 0xf38 <vfprintf+0x24e>
     f2c:	28 e0       	ldi	r18, 0x08	; 8
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	05 c0       	rjmp	.+10     	; 0xf3c <vfprintf+0x252>
     f32:	20 e1       	ldi	r18, 0x10	; 16
     f34:	30 e0       	ldi	r19, 0x00	; 0
     f36:	02 c0       	rjmp	.+4      	; 0xf3c <vfprintf+0x252>
     f38:	20 e1       	ldi	r18, 0x10	; 16
     f3a:	32 e0       	ldi	r19, 0x02	; 2
     f3c:	f8 01       	movw	r30, r16
     f3e:	b7 fe       	sbrs	r11, 7
     f40:	07 c0       	rjmp	.+14     	; 0xf50 <vfprintf+0x266>
     f42:	60 81       	ld	r22, Z
     f44:	71 81       	ldd	r23, Z+1	; 0x01
     f46:	82 81       	ldd	r24, Z+2	; 0x02
     f48:	93 81       	ldd	r25, Z+3	; 0x03
     f4a:	0c 5f       	subi	r16, 0xFC	; 252
     f4c:	1f 4f       	sbci	r17, 0xFF	; 255
     f4e:	06 c0       	rjmp	.+12     	; 0xf5c <vfprintf+0x272>
     f50:	60 81       	ld	r22, Z
     f52:	71 81       	ldd	r23, Z+1	; 0x01
     f54:	80 e0       	ldi	r24, 0x00	; 0
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	0e 5f       	subi	r16, 0xFE	; 254
     f5a:	1f 4f       	sbci	r17, 0xFF	; 255
     f5c:	a4 01       	movw	r20, r8
     f5e:	d6 d0       	rcall	.+428    	; 0x110c <__ultoa_invert>
     f60:	a8 2e       	mov	r10, r24
     f62:	a8 18       	sub	r10, r8
     f64:	fb 2d       	mov	r31, r11
     f66:	ff 77       	andi	r31, 0x7F	; 127
     f68:	7f 2e       	mov	r7, r31
     f6a:	76 fe       	sbrs	r7, 6
     f6c:	0b c0       	rjmp	.+22     	; 0xf84 <vfprintf+0x29a>
     f6e:	37 2d       	mov	r19, r7
     f70:	3e 7f       	andi	r19, 0xFE	; 254
     f72:	a5 14       	cp	r10, r5
     f74:	50 f4       	brcc	.+20     	; 0xf8a <vfprintf+0x2a0>
     f76:	74 fe       	sbrs	r7, 4
     f78:	0a c0       	rjmp	.+20     	; 0xf8e <vfprintf+0x2a4>
     f7a:	72 fc       	sbrc	r7, 2
     f7c:	08 c0       	rjmp	.+16     	; 0xf8e <vfprintf+0x2a4>
     f7e:	37 2d       	mov	r19, r7
     f80:	3e 7e       	andi	r19, 0xEE	; 238
     f82:	05 c0       	rjmp	.+10     	; 0xf8e <vfprintf+0x2a4>
     f84:	ba 2c       	mov	r11, r10
     f86:	37 2d       	mov	r19, r7
     f88:	03 c0       	rjmp	.+6      	; 0xf90 <vfprintf+0x2a6>
     f8a:	ba 2c       	mov	r11, r10
     f8c:	01 c0       	rjmp	.+2      	; 0xf90 <vfprintf+0x2a6>
     f8e:	b5 2c       	mov	r11, r5
     f90:	34 ff       	sbrs	r19, 4
     f92:	0d c0       	rjmp	.+26     	; 0xfae <vfprintf+0x2c4>
     f94:	fe 01       	movw	r30, r28
     f96:	ea 0d       	add	r30, r10
     f98:	f1 1d       	adc	r31, r1
     f9a:	80 81       	ld	r24, Z
     f9c:	80 33       	cpi	r24, 0x30	; 48
     f9e:	11 f4       	brne	.+4      	; 0xfa4 <vfprintf+0x2ba>
     fa0:	39 7e       	andi	r19, 0xE9	; 233
     fa2:	09 c0       	rjmp	.+18     	; 0xfb6 <vfprintf+0x2cc>
     fa4:	32 ff       	sbrs	r19, 2
     fa6:	06 c0       	rjmp	.+12     	; 0xfb4 <vfprintf+0x2ca>
     fa8:	b3 94       	inc	r11
     faa:	b3 94       	inc	r11
     fac:	04 c0       	rjmp	.+8      	; 0xfb6 <vfprintf+0x2cc>
     fae:	83 2f       	mov	r24, r19
     fb0:	86 78       	andi	r24, 0x86	; 134
     fb2:	09 f0       	breq	.+2      	; 0xfb6 <vfprintf+0x2cc>
     fb4:	b3 94       	inc	r11
     fb6:	33 fd       	sbrc	r19, 3
     fb8:	12 c0       	rjmp	.+36     	; 0xfde <vfprintf+0x2f4>
     fba:	30 ff       	sbrs	r19, 0
     fbc:	06 c0       	rjmp	.+12     	; 0xfca <vfprintf+0x2e0>
     fbe:	5a 2c       	mov	r5, r10
     fc0:	b3 14       	cp	r11, r3
     fc2:	18 f4       	brcc	.+6      	; 0xfca <vfprintf+0x2e0>
     fc4:	53 0c       	add	r5, r3
     fc6:	5b 18       	sub	r5, r11
     fc8:	b3 2c       	mov	r11, r3
     fca:	b3 14       	cp	r11, r3
     fcc:	60 f4       	brcc	.+24     	; 0xfe6 <vfprintf+0x2fc>
     fce:	b7 01       	movw	r22, r14
     fd0:	80 e2       	ldi	r24, 0x20	; 32
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	3c 87       	std	Y+12, r19	; 0x0c
     fd6:	62 d0       	rcall	.+196    	; 0x109c <fputc>
     fd8:	b3 94       	inc	r11
     fda:	3c 85       	ldd	r19, Y+12	; 0x0c
     fdc:	f6 cf       	rjmp	.-20     	; 0xfca <vfprintf+0x2e0>
     fde:	b3 14       	cp	r11, r3
     fe0:	10 f4       	brcc	.+4      	; 0xfe6 <vfprintf+0x2fc>
     fe2:	3b 18       	sub	r3, r11
     fe4:	01 c0       	rjmp	.+2      	; 0xfe8 <vfprintf+0x2fe>
     fe6:	31 2c       	mov	r3, r1
     fe8:	34 ff       	sbrs	r19, 4
     fea:	11 c0       	rjmp	.+34     	; 0x100e <vfprintf+0x324>
     fec:	b7 01       	movw	r22, r14
     fee:	80 e3       	ldi	r24, 0x30	; 48
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	3c 87       	std	Y+12, r19	; 0x0c
     ff4:	53 d0       	rcall	.+166    	; 0x109c <fputc>
     ff6:	3c 85       	ldd	r19, Y+12	; 0x0c
     ff8:	32 ff       	sbrs	r19, 2
     ffa:	16 c0       	rjmp	.+44     	; 0x1028 <vfprintf+0x33e>
     ffc:	31 fd       	sbrc	r19, 1
     ffe:	03 c0       	rjmp	.+6      	; 0x1006 <vfprintf+0x31c>
    1000:	88 e7       	ldi	r24, 0x78	; 120
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	02 c0       	rjmp	.+4      	; 0x100a <vfprintf+0x320>
    1006:	88 e5       	ldi	r24, 0x58	; 88
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	b7 01       	movw	r22, r14
    100c:	0c c0       	rjmp	.+24     	; 0x1026 <vfprintf+0x33c>
    100e:	83 2f       	mov	r24, r19
    1010:	86 78       	andi	r24, 0x86	; 134
    1012:	51 f0       	breq	.+20     	; 0x1028 <vfprintf+0x33e>
    1014:	31 ff       	sbrs	r19, 1
    1016:	02 c0       	rjmp	.+4      	; 0x101c <vfprintf+0x332>
    1018:	8b e2       	ldi	r24, 0x2B	; 43
    101a:	01 c0       	rjmp	.+2      	; 0x101e <vfprintf+0x334>
    101c:	80 e2       	ldi	r24, 0x20	; 32
    101e:	37 fd       	sbrc	r19, 7
    1020:	8d e2       	ldi	r24, 0x2D	; 45
    1022:	b7 01       	movw	r22, r14
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	3a d0       	rcall	.+116    	; 0x109c <fputc>
    1028:	a5 14       	cp	r10, r5
    102a:	30 f4       	brcc	.+12     	; 0x1038 <vfprintf+0x34e>
    102c:	b7 01       	movw	r22, r14
    102e:	80 e3       	ldi	r24, 0x30	; 48
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	34 d0       	rcall	.+104    	; 0x109c <fputc>
    1034:	5a 94       	dec	r5
    1036:	f8 cf       	rjmp	.-16     	; 0x1028 <vfprintf+0x33e>
    1038:	aa 94       	dec	r10
    103a:	f4 01       	movw	r30, r8
    103c:	ea 0d       	add	r30, r10
    103e:	f1 1d       	adc	r31, r1
    1040:	80 81       	ld	r24, Z
    1042:	b7 01       	movw	r22, r14
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	2a d0       	rcall	.+84     	; 0x109c <fputc>
    1048:	a1 10       	cpse	r10, r1
    104a:	f6 cf       	rjmp	.-20     	; 0x1038 <vfprintf+0x34e>
    104c:	33 20       	and	r3, r3
    104e:	09 f4       	brne	.+2      	; 0x1052 <vfprintf+0x368>
    1050:	5d ce       	rjmp	.-838    	; 0xd0c <vfprintf+0x22>
    1052:	b7 01       	movw	r22, r14
    1054:	80 e2       	ldi	r24, 0x20	; 32
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	21 d0       	rcall	.+66     	; 0x109c <fputc>
    105a:	3a 94       	dec	r3
    105c:	f7 cf       	rjmp	.-18     	; 0x104c <vfprintf+0x362>
    105e:	f7 01       	movw	r30, r14
    1060:	86 81       	ldd	r24, Z+6	; 0x06
    1062:	97 81       	ldd	r25, Z+7	; 0x07
    1064:	02 c0       	rjmp	.+4      	; 0x106a <vfprintf+0x380>
    1066:	8f ef       	ldi	r24, 0xFF	; 255
    1068:	9f ef       	ldi	r25, 0xFF	; 255
    106a:	2c 96       	adiw	r28, 0x0c	; 12
    106c:	e2 e1       	ldi	r30, 0x12	; 18
    106e:	fa c0       	rjmp	.+500    	; 0x1264 <__epilogue_restores__>

00001070 <strnlen_P>:
    1070:	fc 01       	movw	r30, r24
    1072:	05 90       	lpm	r0, Z+
    1074:	61 50       	subi	r22, 0x01	; 1
    1076:	70 40       	sbci	r23, 0x00	; 0
    1078:	01 10       	cpse	r0, r1
    107a:	d8 f7       	brcc	.-10     	; 0x1072 <strnlen_P+0x2>
    107c:	80 95       	com	r24
    107e:	90 95       	com	r25
    1080:	8e 0f       	add	r24, r30
    1082:	9f 1f       	adc	r25, r31
    1084:	08 95       	ret

00001086 <strnlen>:
    1086:	fc 01       	movw	r30, r24
    1088:	61 50       	subi	r22, 0x01	; 1
    108a:	70 40       	sbci	r23, 0x00	; 0
    108c:	01 90       	ld	r0, Z+
    108e:	01 10       	cpse	r0, r1
    1090:	d8 f7       	brcc	.-10     	; 0x1088 <strnlen+0x2>
    1092:	80 95       	com	r24
    1094:	90 95       	com	r25
    1096:	8e 0f       	add	r24, r30
    1098:	9f 1f       	adc	r25, r31
    109a:	08 95       	ret

0000109c <fputc>:
    109c:	0f 93       	push	r16
    109e:	1f 93       	push	r17
    10a0:	cf 93       	push	r28
    10a2:	df 93       	push	r29
    10a4:	fb 01       	movw	r30, r22
    10a6:	23 81       	ldd	r18, Z+3	; 0x03
    10a8:	21 fd       	sbrc	r18, 1
    10aa:	03 c0       	rjmp	.+6      	; 0x10b2 <fputc+0x16>
    10ac:	8f ef       	ldi	r24, 0xFF	; 255
    10ae:	9f ef       	ldi	r25, 0xFF	; 255
    10b0:	28 c0       	rjmp	.+80     	; 0x1102 <fputc+0x66>
    10b2:	22 ff       	sbrs	r18, 2
    10b4:	16 c0       	rjmp	.+44     	; 0x10e2 <fputc+0x46>
    10b6:	46 81       	ldd	r20, Z+6	; 0x06
    10b8:	57 81       	ldd	r21, Z+7	; 0x07
    10ba:	24 81       	ldd	r18, Z+4	; 0x04
    10bc:	35 81       	ldd	r19, Z+5	; 0x05
    10be:	42 17       	cp	r20, r18
    10c0:	53 07       	cpc	r21, r19
    10c2:	44 f4       	brge	.+16     	; 0x10d4 <fputc+0x38>
    10c4:	a0 81       	ld	r26, Z
    10c6:	b1 81       	ldd	r27, Z+1	; 0x01
    10c8:	9d 01       	movw	r18, r26
    10ca:	2f 5f       	subi	r18, 0xFF	; 255
    10cc:	3f 4f       	sbci	r19, 0xFF	; 255
    10ce:	31 83       	std	Z+1, r19	; 0x01
    10d0:	20 83       	st	Z, r18
    10d2:	8c 93       	st	X, r24
    10d4:	26 81       	ldd	r18, Z+6	; 0x06
    10d6:	37 81       	ldd	r19, Z+7	; 0x07
    10d8:	2f 5f       	subi	r18, 0xFF	; 255
    10da:	3f 4f       	sbci	r19, 0xFF	; 255
    10dc:	37 83       	std	Z+7, r19	; 0x07
    10de:	26 83       	std	Z+6, r18	; 0x06
    10e0:	10 c0       	rjmp	.+32     	; 0x1102 <fputc+0x66>
    10e2:	eb 01       	movw	r28, r22
    10e4:	09 2f       	mov	r16, r25
    10e6:	18 2f       	mov	r17, r24
    10e8:	00 84       	ldd	r0, Z+8	; 0x08
    10ea:	f1 85       	ldd	r31, Z+9	; 0x09
    10ec:	e0 2d       	mov	r30, r0
    10ee:	09 95       	icall
    10f0:	89 2b       	or	r24, r25
    10f2:	e1 f6       	brne	.-72     	; 0x10ac <fputc+0x10>
    10f4:	8e 81       	ldd	r24, Y+6	; 0x06
    10f6:	9f 81       	ldd	r25, Y+7	; 0x07
    10f8:	01 96       	adiw	r24, 0x01	; 1
    10fa:	9f 83       	std	Y+7, r25	; 0x07
    10fc:	8e 83       	std	Y+6, r24	; 0x06
    10fe:	81 2f       	mov	r24, r17
    1100:	90 2f       	mov	r25, r16
    1102:	df 91       	pop	r29
    1104:	cf 91       	pop	r28
    1106:	1f 91       	pop	r17
    1108:	0f 91       	pop	r16
    110a:	08 95       	ret

0000110c <__ultoa_invert>:
    110c:	fa 01       	movw	r30, r20
    110e:	aa 27       	eor	r26, r26
    1110:	28 30       	cpi	r18, 0x08	; 8
    1112:	51 f1       	breq	.+84     	; 0x1168 <__ultoa_invert+0x5c>
    1114:	20 31       	cpi	r18, 0x10	; 16
    1116:	81 f1       	breq	.+96     	; 0x1178 <__ultoa_invert+0x6c>
    1118:	e8 94       	clt
    111a:	6f 93       	push	r22
    111c:	6e 7f       	andi	r22, 0xFE	; 254
    111e:	6e 5f       	subi	r22, 0xFE	; 254
    1120:	7f 4f       	sbci	r23, 0xFF	; 255
    1122:	8f 4f       	sbci	r24, 0xFF	; 255
    1124:	9f 4f       	sbci	r25, 0xFF	; 255
    1126:	af 4f       	sbci	r26, 0xFF	; 255
    1128:	b1 e0       	ldi	r27, 0x01	; 1
    112a:	3e d0       	rcall	.+124    	; 0x11a8 <__ultoa_invert+0x9c>
    112c:	b4 e0       	ldi	r27, 0x04	; 4
    112e:	3c d0       	rcall	.+120    	; 0x11a8 <__ultoa_invert+0x9c>
    1130:	67 0f       	add	r22, r23
    1132:	78 1f       	adc	r23, r24
    1134:	89 1f       	adc	r24, r25
    1136:	9a 1f       	adc	r25, r26
    1138:	a1 1d       	adc	r26, r1
    113a:	68 0f       	add	r22, r24
    113c:	79 1f       	adc	r23, r25
    113e:	8a 1f       	adc	r24, r26
    1140:	91 1d       	adc	r25, r1
    1142:	a1 1d       	adc	r26, r1
    1144:	6a 0f       	add	r22, r26
    1146:	71 1d       	adc	r23, r1
    1148:	81 1d       	adc	r24, r1
    114a:	91 1d       	adc	r25, r1
    114c:	a1 1d       	adc	r26, r1
    114e:	20 d0       	rcall	.+64     	; 0x1190 <__ultoa_invert+0x84>
    1150:	09 f4       	brne	.+2      	; 0x1154 <__ultoa_invert+0x48>
    1152:	68 94       	set
    1154:	3f 91       	pop	r19
    1156:	2a e0       	ldi	r18, 0x0A	; 10
    1158:	26 9f       	mul	r18, r22
    115a:	11 24       	eor	r1, r1
    115c:	30 19       	sub	r19, r0
    115e:	30 5d       	subi	r19, 0xD0	; 208
    1160:	31 93       	st	Z+, r19
    1162:	de f6       	brtc	.-74     	; 0x111a <__ultoa_invert+0xe>
    1164:	cf 01       	movw	r24, r30
    1166:	08 95       	ret
    1168:	46 2f       	mov	r20, r22
    116a:	47 70       	andi	r20, 0x07	; 7
    116c:	40 5d       	subi	r20, 0xD0	; 208
    116e:	41 93       	st	Z+, r20
    1170:	b3 e0       	ldi	r27, 0x03	; 3
    1172:	0f d0       	rcall	.+30     	; 0x1192 <__ultoa_invert+0x86>
    1174:	c9 f7       	brne	.-14     	; 0x1168 <__ultoa_invert+0x5c>
    1176:	f6 cf       	rjmp	.-20     	; 0x1164 <__ultoa_invert+0x58>
    1178:	46 2f       	mov	r20, r22
    117a:	4f 70       	andi	r20, 0x0F	; 15
    117c:	40 5d       	subi	r20, 0xD0	; 208
    117e:	4a 33       	cpi	r20, 0x3A	; 58
    1180:	18 f0       	brcs	.+6      	; 0x1188 <__ultoa_invert+0x7c>
    1182:	49 5d       	subi	r20, 0xD9	; 217
    1184:	31 fd       	sbrc	r19, 1
    1186:	40 52       	subi	r20, 0x20	; 32
    1188:	41 93       	st	Z+, r20
    118a:	02 d0       	rcall	.+4      	; 0x1190 <__ultoa_invert+0x84>
    118c:	a9 f7       	brne	.-22     	; 0x1178 <__ultoa_invert+0x6c>
    118e:	ea cf       	rjmp	.-44     	; 0x1164 <__ultoa_invert+0x58>
    1190:	b4 e0       	ldi	r27, 0x04	; 4
    1192:	a6 95       	lsr	r26
    1194:	97 95       	ror	r25
    1196:	87 95       	ror	r24
    1198:	77 95       	ror	r23
    119a:	67 95       	ror	r22
    119c:	ba 95       	dec	r27
    119e:	c9 f7       	brne	.-14     	; 0x1192 <__ultoa_invert+0x86>
    11a0:	00 97       	sbiw	r24, 0x00	; 0
    11a2:	61 05       	cpc	r22, r1
    11a4:	71 05       	cpc	r23, r1
    11a6:	08 95       	ret
    11a8:	9b 01       	movw	r18, r22
    11aa:	ac 01       	movw	r20, r24
    11ac:	0a 2e       	mov	r0, r26
    11ae:	06 94       	lsr	r0
    11b0:	57 95       	ror	r21
    11b2:	47 95       	ror	r20
    11b4:	37 95       	ror	r19
    11b6:	27 95       	ror	r18
    11b8:	ba 95       	dec	r27
    11ba:	c9 f7       	brne	.-14     	; 0x11ae <__ultoa_invert+0xa2>
    11bc:	62 0f       	add	r22, r18
    11be:	73 1f       	adc	r23, r19
    11c0:	84 1f       	adc	r24, r20
    11c2:	95 1f       	adc	r25, r21
    11c4:	a0 1d       	adc	r26, r0
    11c6:	08 95       	ret

000011c8 <eeprom_read_byte>:
    11c8:	e1 99       	sbic	0x1c, 1	; 28
    11ca:	fe cf       	rjmp	.-4      	; 0x11c8 <eeprom_read_byte>
    11cc:	9f bb       	out	0x1f, r25	; 31
    11ce:	8e bb       	out	0x1e, r24	; 30
    11d0:	e0 9a       	sbi	0x1c, 0	; 28
    11d2:	99 27       	eor	r25, r25
    11d4:	8d b3       	in	r24, 0x1d	; 29
    11d6:	08 95       	ret

000011d8 <eeprom_read_dword>:
    11d8:	a6 e1       	ldi	r26, 0x16	; 22
    11da:	b0 e0       	ldi	r27, 0x00	; 0
    11dc:	44 e0       	ldi	r20, 0x04	; 4
    11de:	50 e0       	ldi	r21, 0x00	; 0
    11e0:	0a c0       	rjmp	.+20     	; 0x11f6 <eeprom_read_blraw>

000011e2 <eeprom_write_dword>:
    11e2:	24 2f       	mov	r18, r20
    11e4:	17 d0       	rcall	.+46     	; 0x1214 <eeprom_write_r18>
    11e6:	25 2f       	mov	r18, r21
    11e8:	15 d0       	rcall	.+42     	; 0x1214 <eeprom_write_r18>
    11ea:	00 c0       	rjmp	.+0      	; 0x11ec <eeprom_write_word>

000011ec <eeprom_write_word>:
    11ec:	12 d0       	rcall	.+36     	; 0x1212 <eeprom_write_byte>
    11ee:	27 2f       	mov	r18, r23
    11f0:	11 c0       	rjmp	.+34     	; 0x1214 <eeprom_write_r18>

000011f2 <eeprom_read_block>:
    11f2:	dc 01       	movw	r26, r24
    11f4:	cb 01       	movw	r24, r22

000011f6 <eeprom_read_blraw>:
    11f6:	fc 01       	movw	r30, r24
    11f8:	e1 99       	sbic	0x1c, 1	; 28
    11fa:	fe cf       	rjmp	.-4      	; 0x11f8 <eeprom_read_blraw+0x2>
    11fc:	06 c0       	rjmp	.+12     	; 0x120a <eeprom_read_blraw+0x14>
    11fe:	ff bb       	out	0x1f, r31	; 31
    1200:	ee bb       	out	0x1e, r30	; 30
    1202:	e0 9a       	sbi	0x1c, 0	; 28
    1204:	31 96       	adiw	r30, 0x01	; 1
    1206:	0d b2       	in	r0, 0x1d	; 29
    1208:	0d 92       	st	X+, r0
    120a:	41 50       	subi	r20, 0x01	; 1
    120c:	50 40       	sbci	r21, 0x00	; 0
    120e:	b8 f7       	brcc	.-18     	; 0x11fe <eeprom_read_blraw+0x8>
    1210:	08 95       	ret

00001212 <eeprom_write_byte>:
    1212:	26 2f       	mov	r18, r22

00001214 <eeprom_write_r18>:
    1214:	e1 99       	sbic	0x1c, 1	; 28
    1216:	fe cf       	rjmp	.-4      	; 0x1214 <eeprom_write_r18>
    1218:	9f bb       	out	0x1f, r25	; 31
    121a:	8e bb       	out	0x1e, r24	; 30
    121c:	2d bb       	out	0x1d, r18	; 29
    121e:	0f b6       	in	r0, 0x3f	; 63
    1220:	f8 94       	cli
    1222:	e2 9a       	sbi	0x1c, 2	; 28
    1224:	e1 9a       	sbi	0x1c, 1	; 28
    1226:	0f be       	out	0x3f, r0	; 63
    1228:	01 96       	adiw	r24, 0x01	; 1
    122a:	08 95       	ret

0000122c <__prologue_saves__>:
    122c:	2f 92       	push	r2
    122e:	3f 92       	push	r3
    1230:	4f 92       	push	r4
    1232:	5f 92       	push	r5
    1234:	6f 92       	push	r6
    1236:	7f 92       	push	r7
    1238:	8f 92       	push	r8
    123a:	9f 92       	push	r9
    123c:	af 92       	push	r10
    123e:	bf 92       	push	r11
    1240:	cf 92       	push	r12
    1242:	df 92       	push	r13
    1244:	ef 92       	push	r14
    1246:	ff 92       	push	r15
    1248:	0f 93       	push	r16
    124a:	1f 93       	push	r17
    124c:	cf 93       	push	r28
    124e:	df 93       	push	r29
    1250:	cd b7       	in	r28, 0x3d	; 61
    1252:	de b7       	in	r29, 0x3e	; 62
    1254:	ca 1b       	sub	r28, r26
    1256:	db 0b       	sbc	r29, r27
    1258:	0f b6       	in	r0, 0x3f	; 63
    125a:	f8 94       	cli
    125c:	de bf       	out	0x3e, r29	; 62
    125e:	0f be       	out	0x3f, r0	; 63
    1260:	cd bf       	out	0x3d, r28	; 61
    1262:	09 94       	ijmp

00001264 <__epilogue_restores__>:
    1264:	2a 88       	ldd	r2, Y+18	; 0x12
    1266:	39 88       	ldd	r3, Y+17	; 0x11
    1268:	48 88       	ldd	r4, Y+16	; 0x10
    126a:	5f 84       	ldd	r5, Y+15	; 0x0f
    126c:	6e 84       	ldd	r6, Y+14	; 0x0e
    126e:	7d 84       	ldd	r7, Y+13	; 0x0d
    1270:	8c 84       	ldd	r8, Y+12	; 0x0c
    1272:	9b 84       	ldd	r9, Y+11	; 0x0b
    1274:	aa 84       	ldd	r10, Y+10	; 0x0a
    1276:	b9 84       	ldd	r11, Y+9	; 0x09
    1278:	c8 84       	ldd	r12, Y+8	; 0x08
    127a:	df 80       	ldd	r13, Y+7	; 0x07
    127c:	ee 80       	ldd	r14, Y+6	; 0x06
    127e:	fd 80       	ldd	r15, Y+5	; 0x05
    1280:	0c 81       	ldd	r16, Y+4	; 0x04
    1282:	1b 81       	ldd	r17, Y+3	; 0x03
    1284:	aa 81       	ldd	r26, Y+2	; 0x02
    1286:	b9 81       	ldd	r27, Y+1	; 0x01
    1288:	ce 0f       	add	r28, r30
    128a:	d1 1d       	adc	r29, r1
    128c:	0f b6       	in	r0, 0x3f	; 63
    128e:	f8 94       	cli
    1290:	de bf       	out	0x3e, r29	; 62
    1292:	0f be       	out	0x3f, r0	; 63
    1294:	cd bf       	out	0x3d, r28	; 61
    1296:	ed 01       	movw	r28, r26
    1298:	08 95       	ret

0000129a <_exit>:
    129a:	f8 94       	cli

0000129c <__stop_program>:
    129c:	ff cf       	rjmp	.-2      	; 0x129c <__stop_program>
